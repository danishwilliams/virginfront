{
  "version": 3,
  "file": "spec.js",
  "sources": [
    "spec/helpers/angular-mocks.js",
    "spec/helpers/helper.js",
    "spec/helpers/jasmine-fixture.js",
    "spec/helpers/jasmine-given.js",
    "spec/helpers/jasmine-only.js",
    "spec/helpers/jasmine-stealth.js",
    "spec/controllers/login_controller_spec.js",
    "spec/controllers/playlist_controller_spec.js",
    "spec/directives/shows_message_when_hovered_spec.js",
    "generated/js/spec.coffee.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACzetvyDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A",
  "sourcesContent": [
    "/**\n * @license AngularJS v1.4.5\n * (c) 2010-2015 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name angular.mock\n * @description\n *\n * Namespace from 'angular-mocks.js' which contains testing related code.\n */\nangular.mock = {};\n\n/**\n * ! This is a private undocumented service !\n *\n * @name $browser\n *\n * @description\n * This service is a mock implementation of {@link ng.$browser}. It provides fake\n * implementation for commonly used browser apis that are hard to test, e.g. setTimeout, xhr,\n * cookies, etc...\n *\n * The api of this service is the same as that of the real {@link ng.$browser $browser}, except\n * that there are several helper methods available which can be used in tests.\n */\nangular.mock.$BrowserProvider = function() {\n  this.$get = function() {\n    return new angular.mock.$Browser();\n  };\n};\n\nangular.mock.$Browser = function() {\n  var self = this;\n\n  this.isMock = true;\n  self.$$url = \"http://server/\";\n  self.$$lastUrl = self.$$url; // used by url polling fn\n  self.pollFns = [];\n\n  // TODO(vojta): remove this temporary api\n  self.$$completeOutstandingRequest = angular.noop;\n  self.$$incOutstandingRequestCount = angular.noop;\n\n\n  // register url polling fn\n\n  self.onUrlChange = function(listener) {\n    self.pollFns.push(\n      function() {\n        if (self.$$lastUrl !== self.$$url || self.$$state !== self.$$lastState) {\n          self.$$lastUrl = self.$$url;\n          self.$$lastState = self.$$state;\n          listener(self.$$url, self.$$state);\n        }\n      }\n    );\n\n    return listener;\n  };\n\n  self.$$applicationDestroyed = angular.noop;\n  self.$$checkUrlChange = angular.noop;\n\n  self.deferredFns = [];\n  self.deferredNextId = 0;\n\n  self.defer = function(fn, delay) {\n    delay = delay || 0;\n    self.deferredFns.push({time:(self.defer.now + delay), fn:fn, id: self.deferredNextId});\n    self.deferredFns.sort(function(a, b) { return a.time - b.time;});\n    return self.deferredNextId++;\n  };\n\n\n  /**\n   * @name $browser#defer.now\n   *\n   * @description\n   * Current milliseconds mock time.\n   */\n  self.defer.now = 0;\n\n\n  self.defer.cancel = function(deferId) {\n    var fnIndex;\n\n    angular.forEach(self.deferredFns, function(fn, index) {\n      if (fn.id === deferId) fnIndex = index;\n    });\n\n    if (fnIndex !== undefined) {\n      self.deferredFns.splice(fnIndex, 1);\n      return true;\n    }\n\n    return false;\n  };\n\n\n  /**\n   * @name $browser#defer.flush\n   *\n   * @description\n   * Flushes all pending requests and executes the defer callbacks.\n   *\n   * @param {number=} number of milliseconds to flush. See {@link #defer.now}\n   */\n  self.defer.flush = function(delay) {\n    if (angular.isDefined(delay)) {\n      self.defer.now += delay;\n    } else {\n      if (self.deferredFns.length) {\n        self.defer.now = self.deferredFns[self.deferredFns.length - 1].time;\n      } else {\n        throw new Error('No deferred tasks to be flushed');\n      }\n    }\n\n    while (self.deferredFns.length && self.deferredFns[0].time <= self.defer.now) {\n      self.deferredFns.shift().fn();\n    }\n  };\n\n  self.$$baseHref = '/';\n  self.baseHref = function() {\n    return this.$$baseHref;\n  };\n};\nangular.mock.$Browser.prototype = {\n\n/**\n  * @name $browser#poll\n  *\n  * @description\n  * run all fns in pollFns\n  */\n  poll: function poll() {\n    angular.forEach(this.pollFns, function(pollFn) {\n      pollFn();\n    });\n  },\n\n  url: function(url, replace, state) {\n    if (angular.isUndefined(state)) {\n      state = null;\n    }\n    if (url) {\n      this.$$url = url;\n      // Native pushState serializes & copies the object; simulate it.\n      this.$$state = angular.copy(state);\n      return this;\n    }\n\n    return this.$$url;\n  },\n\n  state: function() {\n    return this.$$state;\n  },\n\n  notifyWhenNoOutstandingRequests: function(fn) {\n    fn();\n  }\n};\n\n\n/**\n * @ngdoc provider\n * @name $exceptionHandlerProvider\n *\n * @description\n * Configures the mock implementation of {@link ng.$exceptionHandler} to rethrow or to log errors\n * passed to the `$exceptionHandler`.\n */\n\n/**\n * @ngdoc service\n * @name $exceptionHandler\n *\n * @description\n * Mock implementation of {@link ng.$exceptionHandler} that rethrows or logs errors passed\n * to it. See {@link ngMock.$exceptionHandlerProvider $exceptionHandlerProvider} for configuration\n * information.\n *\n *\n * ```js\n *   describe('$exceptionHandlerProvider', function() {\n *\n *     it('should capture log messages and exceptions', function() {\n *\n *       module(function($exceptionHandlerProvider) {\n *         $exceptionHandlerProvider.mode('log');\n *       });\n *\n *       inject(function($log, $exceptionHandler, $timeout) {\n *         $timeout(function() { $log.log(1); });\n *         $timeout(function() { $log.log(2); throw 'banana peel'; });\n *         $timeout(function() { $log.log(3); });\n *         expect($exceptionHandler.errors).toEqual([]);\n *         expect($log.assertEmpty());\n *         $timeout.flush();\n *         expect($exceptionHandler.errors).toEqual(['banana peel']);\n *         expect($log.log.logs).toEqual([[1], [2], [3]]);\n *       });\n *     });\n *   });\n * ```\n */\n\nangular.mock.$ExceptionHandlerProvider = function() {\n  var handler;\n\n  /**\n   * @ngdoc method\n   * @name $exceptionHandlerProvider#mode\n   *\n   * @description\n   * Sets the logging mode.\n   *\n   * @param {string} mode Mode of operation, defaults to `rethrow`.\n   *\n   *   - `log`: Sometimes it is desirable to test that an error is thrown, for this case the `log`\n   *            mode stores an array of errors in `$exceptionHandler.errors`, to allow later\n   *            assertion of them. See {@link ngMock.$log#assertEmpty assertEmpty()} and\n   *            {@link ngMock.$log#reset reset()}\n   *   - `rethrow`: If any errors are passed to the handler in tests, it typically means that there\n   *                is a bug in the application or test, so this mock will make these tests fail.\n   *                For any implementations that expect exceptions to be thrown, the `rethrow` mode\n   *                will also maintain a log of thrown errors.\n   */\n  this.mode = function(mode) {\n\n    switch (mode) {\n      case 'log':\n      case 'rethrow':\n        var errors = [];\n        handler = function(e) {\n          if (arguments.length == 1) {\n            errors.push(e);\n          } else {\n            errors.push([].slice.call(arguments, 0));\n          }\n          if (mode === \"rethrow\") {\n            throw e;\n          }\n        };\n        handler.errors = errors;\n        break;\n      default:\n        throw new Error(\"Unknown mode '\" + mode + \"', only 'log'/'rethrow' modes are allowed!\");\n    }\n  };\n\n  this.$get = function() {\n    return handler;\n  };\n\n  this.mode('rethrow');\n};\n\n\n/**\n * @ngdoc service\n * @name $log\n *\n * @description\n * Mock implementation of {@link ng.$log} that gathers all logged messages in arrays\n * (one array per logging level). These arrays are exposed as `logs` property of each of the\n * level-specific log function, e.g. for level `error` the array is exposed as `$log.error.logs`.\n *\n */\nangular.mock.$LogProvider = function() {\n  var debug = true;\n\n  function concat(array1, array2, index) {\n    return array1.concat(Array.prototype.slice.call(array2, index));\n  }\n\n  this.debugEnabled = function(flag) {\n    if (angular.isDefined(flag)) {\n      debug = flag;\n      return this;\n    } else {\n      return debug;\n    }\n  };\n\n  this.$get = function() {\n    var $log = {\n      log: function() { $log.log.logs.push(concat([], arguments, 0)); },\n      warn: function() { $log.warn.logs.push(concat([], arguments, 0)); },\n      info: function() { $log.info.logs.push(concat([], arguments, 0)); },\n      error: function() { $log.error.logs.push(concat([], arguments, 0)); },\n      debug: function() {\n        if (debug) {\n          $log.debug.logs.push(concat([], arguments, 0));\n        }\n      }\n    };\n\n    /**\n     * @ngdoc method\n     * @name $log#reset\n     *\n     * @description\n     * Reset all of the logging arrays to empty.\n     */\n    $log.reset = function() {\n      /**\n       * @ngdoc property\n       * @name $log#log.logs\n       *\n       * @description\n       * Array of messages logged using {@link ng.$log#log `log()`}.\n       *\n       * @example\n       * ```js\n       * $log.log('Some Log');\n       * var first = $log.log.logs.unshift();\n       * ```\n       */\n      $log.log.logs = [];\n      /**\n       * @ngdoc property\n       * @name $log#info.logs\n       *\n       * @description\n       * Array of messages logged using {@link ng.$log#info `info()`}.\n       *\n       * @example\n       * ```js\n       * $log.info('Some Info');\n       * var first = $log.info.logs.unshift();\n       * ```\n       */\n      $log.info.logs = [];\n      /**\n       * @ngdoc property\n       * @name $log#warn.logs\n       *\n       * @description\n       * Array of messages logged using {@link ng.$log#warn `warn()`}.\n       *\n       * @example\n       * ```js\n       * $log.warn('Some Warning');\n       * var first = $log.warn.logs.unshift();\n       * ```\n       */\n      $log.warn.logs = [];\n      /**\n       * @ngdoc property\n       * @name $log#error.logs\n       *\n       * @description\n       * Array of messages logged using {@link ng.$log#error `error()`}.\n       *\n       * @example\n       * ```js\n       * $log.error('Some Error');\n       * var first = $log.error.logs.unshift();\n       * ```\n       */\n      $log.error.logs = [];\n        /**\n       * @ngdoc property\n       * @name $log#debug.logs\n       *\n       * @description\n       * Array of messages logged using {@link ng.$log#debug `debug()`}.\n       *\n       * @example\n       * ```js\n       * $log.debug('Some Error');\n       * var first = $log.debug.logs.unshift();\n       * ```\n       */\n      $log.debug.logs = [];\n    };\n\n    /**\n     * @ngdoc method\n     * @name $log#assertEmpty\n     *\n     * @description\n     * Assert that all of the logging methods have no logged messages. If any messages are present,\n     * an exception is thrown.\n     */\n    $log.assertEmpty = function() {\n      var errors = [];\n      angular.forEach(['error', 'warn', 'info', 'log', 'debug'], function(logLevel) {\n        angular.forEach($log[logLevel].logs, function(log) {\n          angular.forEach(log, function(logItem) {\n            errors.push('MOCK $log (' + logLevel + '): ' + String(logItem) + '\\n' +\n                        (logItem.stack || ''));\n          });\n        });\n      });\n      if (errors.length) {\n        errors.unshift(\"Expected $log to be empty! Either a message was logged unexpectedly, or \" +\n          \"an expected log message was not checked and removed:\");\n        errors.push('');\n        throw new Error(errors.join('\\n---------\\n'));\n      }\n    };\n\n    $log.reset();\n    return $log;\n  };\n};\n\n\n/**\n * @ngdoc service\n * @name $interval\n *\n * @description\n * Mock implementation of the $interval service.\n *\n * Use {@link ngMock.$interval#flush `$interval.flush(millis)`} to\n * move forward by `millis` milliseconds and trigger any functions scheduled to run in that\n * time.\n *\n * @param {function()} fn A function that should be called repeatedly.\n * @param {number} delay Number of milliseconds between each function call.\n * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat\n *   indefinitely.\n * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise\n *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.\n * @param {...*=} Pass additional parameters to the executed function.\n * @returns {promise} A promise which will be notified on each iteration.\n */\nangular.mock.$IntervalProvider = function() {\n  this.$get = ['$browser', '$rootScope', '$q', '$$q',\n       function($browser,   $rootScope,   $q,   $$q) {\n    var repeatFns = [],\n        nextRepeatId = 0,\n        now = 0;\n\n    var $interval = function(fn, delay, count, invokeApply) {\n      var hasParams = arguments.length > 4,\n          args = hasParams ? Array.prototype.slice.call(arguments, 4) : [],\n          iteration = 0,\n          skipApply = (angular.isDefined(invokeApply) && !invokeApply),\n          deferred = (skipApply ? $$q : $q).defer(),\n          promise = deferred.promise;\n\n      count = (angular.isDefined(count)) ? count : 0;\n      promise.then(null, null, (!hasParams) ? fn : function() {\n        fn.apply(null, args);\n      });\n\n      promise.$$intervalId = nextRepeatId;\n\n      function tick() {\n        deferred.notify(iteration++);\n\n        if (count > 0 && iteration >= count) {\n          var fnIndex;\n          deferred.resolve(iteration);\n\n          angular.forEach(repeatFns, function(fn, index) {\n            if (fn.id === promise.$$intervalId) fnIndex = index;\n          });\n\n          if (fnIndex !== undefined) {\n            repeatFns.splice(fnIndex, 1);\n          }\n        }\n\n        if (skipApply) {\n          $browser.defer.flush();\n        } else {\n          $rootScope.$apply();\n        }\n      }\n\n      repeatFns.push({\n        nextTime:(now + delay),\n        delay: delay,\n        fn: tick,\n        id: nextRepeatId,\n        deferred: deferred\n      });\n      repeatFns.sort(function(a, b) { return a.nextTime - b.nextTime;});\n\n      nextRepeatId++;\n      return promise;\n    };\n    /**\n     * @ngdoc method\n     * @name $interval#cancel\n     *\n     * @description\n     * Cancels a task associated with the `promise`.\n     *\n     * @param {promise} promise A promise from calling the `$interval` function.\n     * @returns {boolean} Returns `true` if the task was successfully cancelled.\n     */\n    $interval.cancel = function(promise) {\n      if (!promise) return false;\n      var fnIndex;\n\n      angular.forEach(repeatFns, function(fn, index) {\n        if (fn.id === promise.$$intervalId) fnIndex = index;\n      });\n\n      if (fnIndex !== undefined) {\n        repeatFns[fnIndex].deferred.reject('canceled');\n        repeatFns.splice(fnIndex, 1);\n        return true;\n      }\n\n      return false;\n    };\n\n    /**\n     * @ngdoc method\n     * @name $interval#flush\n     * @description\n     *\n     * Runs interval tasks scheduled to be run in the next `millis` milliseconds.\n     *\n     * @param {number=} millis maximum timeout amount to flush up until.\n     *\n     * @return {number} The amount of time moved forward.\n     */\n    $interval.flush = function(millis) {\n      now += millis;\n      while (repeatFns.length && repeatFns[0].nextTime <= now) {\n        var task = repeatFns[0];\n        task.fn();\n        task.nextTime += task.delay;\n        repeatFns.sort(function(a, b) { return a.nextTime - b.nextTime;});\n      }\n      return millis;\n    };\n\n    return $interval;\n  }];\n};\n\n\n/* jshint -W101 */\n/* The R_ISO8061_STR regex is never going to fit into the 100 char limit!\n * This directive should go inside the anonymous function but a bug in JSHint means that it would\n * not be enacted early enough to prevent the warning.\n */\nvar R_ISO8061_STR = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?:\\:?(\\d\\d)(?:\\:?(\\d\\d)(?:\\.(\\d{3}))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d)))?$/;\n\nfunction jsonStringToDate(string) {\n  var match;\n  if (match = string.match(R_ISO8061_STR)) {\n    var date = new Date(0),\n        tzHour = 0,\n        tzMin  = 0;\n    if (match[9]) {\n      tzHour = toInt(match[9] + match[10]);\n      tzMin = toInt(match[9] + match[11]);\n    }\n    date.setUTCFullYear(toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));\n    date.setUTCHours(toInt(match[4] || 0) - tzHour,\n                     toInt(match[5] || 0) - tzMin,\n                     toInt(match[6] || 0),\n                     toInt(match[7] || 0));\n    return date;\n  }\n  return string;\n}\n\nfunction toInt(str) {\n  return parseInt(str, 10);\n}\n\nfunction padNumber(num, digits, trim) {\n  var neg = '';\n  if (num < 0) {\n    neg =  '-';\n    num = -num;\n  }\n  num = '' + num;\n  while (num.length < digits) num = '0' + num;\n  if (trim) {\n    num = num.substr(num.length - digits);\n  }\n  return neg + num;\n}\n\n\n/**\n * @ngdoc type\n * @name angular.mock.TzDate\n * @description\n *\n * *NOTE*: this is not an injectable instance, just a globally available mock class of `Date`.\n *\n * Mock of the Date type which has its timezone specified via constructor arg.\n *\n * The main purpose is to create Date-like instances with timezone fixed to the specified timezone\n * offset, so that we can test code that depends on local timezone settings without dependency on\n * the time zone settings of the machine where the code is running.\n *\n * @param {number} offset Offset of the *desired* timezone in hours (fractions will be honored)\n * @param {(number|string)} timestamp Timestamp representing the desired time in *UTC*\n *\n * @example\n * !!!! WARNING !!!!!\n * This is not a complete Date object so only methods that were implemented can be called safely.\n * To make matters worse, TzDate instances inherit stuff from Date via a prototype.\n *\n * We do our best to intercept calls to \"unimplemented\" methods, but since the list of methods is\n * incomplete we might be missing some non-standard methods. This can result in errors like:\n * \"Date.prototype.foo called on incompatible Object\".\n *\n * ```js\n * var newYearInBratislava = new TzDate(-1, '2009-12-31T23:00:00Z');\n * newYearInBratislava.getTimezoneOffset() => -60;\n * newYearInBratislava.getFullYear() => 2010;\n * newYearInBratislava.getMonth() => 0;\n * newYearInBratislava.getDate() => 1;\n * newYearInBratislava.getHours() => 0;\n * newYearInBratislava.getMinutes() => 0;\n * newYearInBratislava.getSeconds() => 0;\n * ```\n *\n */\nangular.mock.TzDate = function(offset, timestamp) {\n  var self = new Date(0);\n  if (angular.isString(timestamp)) {\n    var tsStr = timestamp;\n\n    self.origDate = jsonStringToDate(timestamp);\n\n    timestamp = self.origDate.getTime();\n    if (isNaN(timestamp)) {\n      throw {\n        name: \"Illegal Argument\",\n        message: \"Arg '\" + tsStr + \"' passed into TzDate constructor is not a valid date string\"\n      };\n    }\n  } else {\n    self.origDate = new Date(timestamp);\n  }\n\n  var localOffset = new Date(timestamp).getTimezoneOffset();\n  self.offsetDiff = localOffset * 60 * 1000 - offset * 1000 * 60 * 60;\n  self.date = new Date(timestamp + self.offsetDiff);\n\n  self.getTime = function() {\n    return self.date.getTime() - self.offsetDiff;\n  };\n\n  self.toLocaleDateString = function() {\n    return self.date.toLocaleDateString();\n  };\n\n  self.getFullYear = function() {\n    return self.date.getFullYear();\n  };\n\n  self.getMonth = function() {\n    return self.date.getMonth();\n  };\n\n  self.getDate = function() {\n    return self.date.getDate();\n  };\n\n  self.getHours = function() {\n    return self.date.getHours();\n  };\n\n  self.getMinutes = function() {\n    return self.date.getMinutes();\n  };\n\n  self.getSeconds = function() {\n    return self.date.getSeconds();\n  };\n\n  self.getMilliseconds = function() {\n    return self.date.getMilliseconds();\n  };\n\n  self.getTimezoneOffset = function() {\n    return offset * 60;\n  };\n\n  self.getUTCFullYear = function() {\n    return self.origDate.getUTCFullYear();\n  };\n\n  self.getUTCMonth = function() {\n    return self.origDate.getUTCMonth();\n  };\n\n  self.getUTCDate = function() {\n    return self.origDate.getUTCDate();\n  };\n\n  self.getUTCHours = function() {\n    return self.origDate.getUTCHours();\n  };\n\n  self.getUTCMinutes = function() {\n    return self.origDate.getUTCMinutes();\n  };\n\n  self.getUTCSeconds = function() {\n    return self.origDate.getUTCSeconds();\n  };\n\n  self.getUTCMilliseconds = function() {\n    return self.origDate.getUTCMilliseconds();\n  };\n\n  self.getDay = function() {\n    return self.date.getDay();\n  };\n\n  // provide this method only on browsers that already have it\n  if (self.toISOString) {\n    self.toISOString = function() {\n      return padNumber(self.origDate.getUTCFullYear(), 4) + '-' +\n            padNumber(self.origDate.getUTCMonth() + 1, 2) + '-' +\n            padNumber(self.origDate.getUTCDate(), 2) + 'T' +\n            padNumber(self.origDate.getUTCHours(), 2) + ':' +\n            padNumber(self.origDate.getUTCMinutes(), 2) + ':' +\n            padNumber(self.origDate.getUTCSeconds(), 2) + '.' +\n            padNumber(self.origDate.getUTCMilliseconds(), 3) + 'Z';\n    };\n  }\n\n  //hide all methods not implemented in this mock that the Date prototype exposes\n  var unimplementedMethods = ['getUTCDay',\n      'getYear', 'setDate', 'setFullYear', 'setHours', 'setMilliseconds',\n      'setMinutes', 'setMonth', 'setSeconds', 'setTime', 'setUTCDate', 'setUTCFullYear',\n      'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes', 'setUTCMonth', 'setUTCSeconds',\n      'setYear', 'toDateString', 'toGMTString', 'toJSON', 'toLocaleFormat', 'toLocaleString',\n      'toLocaleTimeString', 'toSource', 'toString', 'toTimeString', 'toUTCString', 'valueOf'];\n\n  angular.forEach(unimplementedMethods, function(methodName) {\n    self[methodName] = function() {\n      throw new Error(\"Method '\" + methodName + \"' is not implemented in the TzDate mock\");\n    };\n  });\n\n  return self;\n};\n\n//make \"tzDateInstance instanceof Date\" return true\nangular.mock.TzDate.prototype = Date.prototype;\n/* jshint +W101 */\n\nangular.mock.animate = angular.module('ngAnimateMock', ['ng'])\n\n  .config(['$provide', function($provide) {\n\n    $provide.factory('$$forceReflow', function() {\n      function reflowFn() {\n        reflowFn.totalReflows++;\n      }\n      reflowFn.totalReflows = 0;\n      return reflowFn;\n    });\n\n    $provide.factory('$$animateAsyncRun', function() {\n      var queue = [];\n      var queueFn = function() {\n        return function(fn) {\n          queue.push(fn);\n        };\n      };\n      queueFn.flush = function() {\n        if (queue.length === 0) return false;\n\n        for (var i = 0; i < queue.length; i++) {\n          queue[i]();\n        }\n        queue = [];\n\n        return true;\n      };\n      return queueFn;\n    });\n\n    $provide.decorator('$animate', ['$delegate', '$timeout', '$browser', '$$rAF', '$$forceReflow', '$$animateAsyncRun',\n                            function($delegate,   $timeout,   $browser,   $$rAF,   $$forceReflow,   $$animateAsyncRun) {\n\n      var animate = {\n        queue: [],\n        cancel: $delegate.cancel,\n        on: $delegate.on,\n        off: $delegate.off,\n        pin: $delegate.pin,\n        get reflows() {\n          return $$forceReflow.totalReflows;\n        },\n        enabled: $delegate.enabled,\n        flush: function() {\n          var rafsFlushed = false;\n          if ($$rAF.queue.length) {\n            $$rAF.flush();\n            rafsFlushed = true;\n          }\n\n          var animatorsFlushed = $$animateAsyncRun.flush();\n          if (!rafsFlushed && !animatorsFlushed) {\n            throw new Error('No pending animations ready to be closed or flushed');\n          }\n        }\n      };\n\n      angular.forEach(\n        ['animate','enter','leave','move','addClass','removeClass','setClass'], function(method) {\n        animate[method] = function() {\n          animate.queue.push({\n            event: method,\n            element: arguments[0],\n            options: arguments[arguments.length - 1],\n            args: arguments\n          });\n          return $delegate[method].apply($delegate, arguments);\n        };\n      });\n\n      return animate;\n    }]);\n\n  }]);\n\n\n/**\n * @ngdoc function\n * @name angular.mock.dump\n * @description\n *\n * *NOTE*: this is not an injectable instance, just a globally available function.\n *\n * Method for serializing common angular objects (scope, elements, etc..) into strings, useful for\n * debugging.\n *\n * This method is also available on window, where it can be used to display objects on debug\n * console.\n *\n * @param {*} object - any object to turn into string.\n * @return {string} a serialized string of the argument\n */\nangular.mock.dump = function(object) {\n  return serialize(object);\n\n  function serialize(object) {\n    var out;\n\n    if (angular.isElement(object)) {\n      object = angular.element(object);\n      out = angular.element('<div></div>');\n      angular.forEach(object, function(element) {\n        out.append(angular.element(element).clone());\n      });\n      out = out.html();\n    } else if (angular.isArray(object)) {\n      out = [];\n      angular.forEach(object, function(o) {\n        out.push(serialize(o));\n      });\n      out = '[ ' + out.join(', ') + ' ]';\n    } else if (angular.isObject(object)) {\n      if (angular.isFunction(object.$eval) && angular.isFunction(object.$apply)) {\n        out = serializeScope(object);\n      } else if (object instanceof Error) {\n        out = object.stack || ('' + object.name + ': ' + object.message);\n      } else {\n        // TODO(i): this prevents methods being logged,\n        // we should have a better way to serialize objects\n        out = angular.toJson(object, true);\n      }\n    } else {\n      out = String(object);\n    }\n\n    return out;\n  }\n\n  function serializeScope(scope, offset) {\n    offset = offset ||  '  ';\n    var log = [offset + 'Scope(' + scope.$id + '): {'];\n    for (var key in scope) {\n      if (Object.prototype.hasOwnProperty.call(scope, key) && !key.match(/^(\\$|this)/)) {\n        log.push('  ' + key + ': ' + angular.toJson(scope[key]));\n      }\n    }\n    var child = scope.$$childHead;\n    while (child) {\n      log.push(serializeScope(child, offset + '  '));\n      child = child.$$nextSibling;\n    }\n    log.push('}');\n    return log.join('\\n' + offset);\n  }\n};\n\n/**\n * @ngdoc service\n * @name $httpBackend\n * @description\n * Fake HTTP backend implementation suitable for unit testing applications that use the\n * {@link ng.$http $http service}.\n *\n * *Note*: For fake HTTP backend implementation suitable for end-to-end testing or backend-less\n * development please see {@link ngMockE2E.$httpBackend e2e $httpBackend mock}.\n *\n * During unit testing, we want our unit tests to run quickly and have no external dependencies so\n * we don’t want to send [XHR](https://developer.mozilla.org/en/xmlhttprequest) or\n * [JSONP](http://en.wikipedia.org/wiki/JSONP) requests to a real server. All we really need is\n * to verify whether a certain request has been sent or not, or alternatively just let the\n * application make requests, respond with pre-trained responses and assert that the end result is\n * what we expect it to be.\n *\n * This mock implementation can be used to respond with static or dynamic responses via the\n * `expect` and `when` apis and their shortcuts (`expectGET`, `whenPOST`, etc).\n *\n * When an Angular application needs some data from a server, it calls the $http service, which\n * sends the request to a real server using $httpBackend service. With dependency injection, it is\n * easy to inject $httpBackend mock (which has the same API as $httpBackend) and use it to verify\n * the requests and respond with some testing data without sending a request to a real server.\n *\n * There are two ways to specify what test data should be returned as http responses by the mock\n * backend when the code under test makes http requests:\n *\n * - `$httpBackend.expect` - specifies a request expectation\n * - `$httpBackend.when` - specifies a backend definition\n *\n *\n * # Request Expectations vs Backend Definitions\n *\n * Request expectations provide a way to make assertions about requests made by the application and\n * to define responses for those requests. The test will fail if the expected requests are not made\n * or they are made in the wrong order.\n *\n * Backend definitions allow you to define a fake backend for your application which doesn't assert\n * if a particular request was made or not, it just returns a trained response if a request is made.\n * The test will pass whether or not the request gets made during testing.\n *\n *\n * <table class=\"table\">\n *   <tr><th width=\"220px\"></th><th>Request expectations</th><th>Backend definitions</th></tr>\n *   <tr>\n *     <th>Syntax</th>\n *     <td>.expect(...).respond(...)</td>\n *     <td>.when(...).respond(...)</td>\n *   </tr>\n *   <tr>\n *     <th>Typical usage</th>\n *     <td>strict unit tests</td>\n *     <td>loose (black-box) unit testing</td>\n *   </tr>\n *   <tr>\n *     <th>Fulfills multiple requests</th>\n *     <td>NO</td>\n *     <td>YES</td>\n *   </tr>\n *   <tr>\n *     <th>Order of requests matters</th>\n *     <td>YES</td>\n *     <td>NO</td>\n *   </tr>\n *   <tr>\n *     <th>Request required</th>\n *     <td>YES</td>\n *     <td>NO</td>\n *   </tr>\n *   <tr>\n *     <th>Response required</th>\n *     <td>optional (see below)</td>\n *     <td>YES</td>\n *   </tr>\n * </table>\n *\n * In cases where both backend definitions and request expectations are specified during unit\n * testing, the request expectations are evaluated first.\n *\n * If a request expectation has no response specified, the algorithm will search your backend\n * definitions for an appropriate response.\n *\n * If a request didn't match any expectation or if the expectation doesn't have the response\n * defined, the backend definitions are evaluated in sequential order to see if any of them match\n * the request. The response from the first matched definition is returned.\n *\n *\n * # Flushing HTTP requests\n *\n * The $httpBackend used in production always responds to requests asynchronously. If we preserved\n * this behavior in unit testing, we'd have to create async unit tests, which are hard to write,\n * to follow and to maintain. But neither can the testing mock respond synchronously; that would\n * change the execution of the code under test. For this reason, the mock $httpBackend has a\n * `flush()` method, which allows the test to explicitly flush pending requests. This preserves\n * the async api of the backend, while allowing the test to execute synchronously.\n *\n *\n * # Unit testing with mock $httpBackend\n * The following code shows how to setup and use the mock backend when unit testing a controller.\n * First we create the controller under test:\n *\n  ```js\n  // The module code\n  angular\n    .module('MyApp', [])\n    .controller('MyController', MyController);\n\n  // The controller code\n  function MyController($scope, $http) {\n    var authToken;\n\n    $http.get('/auth.py').success(function(data, status, headers) {\n      authToken = headers('A-Token');\n      $scope.user = data;\n    });\n\n    $scope.saveMessage = function(message) {\n      var headers = { 'Authorization': authToken };\n      $scope.status = 'Saving...';\n\n      $http.post('/add-msg.py', message, { headers: headers } ).success(function(response) {\n        $scope.status = '';\n      }).error(function() {\n        $scope.status = 'ERROR!';\n      });\n    };\n  }\n  ```\n *\n * Now we setup the mock backend and create the test specs:\n *\n  ```js\n    // testing controller\n    describe('MyController', function() {\n       var $httpBackend, $rootScope, createController, authRequestHandler;\n\n       // Set up the module\n       beforeEach(module('MyApp'));\n\n       beforeEach(inject(function($injector) {\n         // Set up the mock http service responses\n         $httpBackend = $injector.get('$httpBackend');\n         // backend definition common for all tests\n         authRequestHandler = $httpBackend.when('GET', '/auth.py')\n                                .respond({userId: 'userX'}, {'A-Token': 'xxx'});\n\n         // Get hold of a scope (i.e. the root scope)\n         $rootScope = $injector.get('$rootScope');\n         // The $controller service is used to create instances of controllers\n         var $controller = $injector.get('$controller');\n\n         createController = function() {\n           return $controller('MyController', {'$scope' : $rootScope });\n         };\n       }));\n\n\n       afterEach(function() {\n         $httpBackend.verifyNoOutstandingExpectation();\n         $httpBackend.verifyNoOutstandingRequest();\n       });\n\n\n       it('should fetch authentication token', function() {\n         $httpBackend.expectGET('/auth.py');\n         var controller = createController();\n         $httpBackend.flush();\n       });\n\n\n       it('should fail authentication', function() {\n\n         // Notice how you can change the response even after it was set\n         authRequestHandler.respond(401, '');\n\n         $httpBackend.expectGET('/auth.py');\n         var controller = createController();\n         $httpBackend.flush();\n         expect($rootScope.status).toBe('Failed...');\n       });\n\n\n       it('should send msg to server', function() {\n         var controller = createController();\n         $httpBackend.flush();\n\n         // now you don’t care about the authentication, but\n         // the controller will still send the request and\n         // $httpBackend will respond without you having to\n         // specify the expectation and response for this request\n\n         $httpBackend.expectPOST('/add-msg.py', 'message content').respond(201, '');\n         $rootScope.saveMessage('message content');\n         expect($rootScope.status).toBe('Saving...');\n         $httpBackend.flush();\n         expect($rootScope.status).toBe('');\n       });\n\n\n       it('should send auth header', function() {\n         var controller = createController();\n         $httpBackend.flush();\n\n         $httpBackend.expectPOST('/add-msg.py', undefined, function(headers) {\n           // check if the header was sent, if it wasn't the expectation won't\n           // match the request and the test will fail\n           return headers['Authorization'] == 'xxx';\n         }).respond(201, '');\n\n         $rootScope.saveMessage('whatever');\n         $httpBackend.flush();\n       });\n    });\n   ```\n */\nangular.mock.$HttpBackendProvider = function() {\n  this.$get = ['$rootScope', '$timeout', createHttpBackendMock];\n};\n\n/**\n * General factory function for $httpBackend mock.\n * Returns instance for unit testing (when no arguments specified):\n *   - passing through is disabled\n *   - auto flushing is disabled\n *\n * Returns instance for e2e testing (when `$delegate` and `$browser` specified):\n *   - passing through (delegating request to real backend) is enabled\n *   - auto flushing is enabled\n *\n * @param {Object=} $delegate Real $httpBackend instance (allow passing through if specified)\n * @param {Object=} $browser Auto-flushing enabled if specified\n * @return {Object} Instance of $httpBackend mock\n */\nfunction createHttpBackendMock($rootScope, $timeout, $delegate, $browser) {\n  var definitions = [],\n      expectations = [],\n      responses = [],\n      responsesPush = angular.bind(responses, responses.push),\n      copy = angular.copy;\n\n  function createResponse(status, data, headers, statusText) {\n    if (angular.isFunction(status)) return status;\n\n    return function() {\n      return angular.isNumber(status)\n          ? [status, data, headers, statusText]\n          : [200, status, data, headers];\n    };\n  }\n\n  // TODO(vojta): change params to: method, url, data, headers, callback\n  function $httpBackend(method, url, data, callback, headers, timeout, withCredentials) {\n    var xhr = new MockXhr(),\n        expectation = expectations[0],\n        wasExpected = false;\n\n    function prettyPrint(data) {\n      return (angular.isString(data) || angular.isFunction(data) || data instanceof RegExp)\n          ? data\n          : angular.toJson(data);\n    }\n\n    function wrapResponse(wrapped) {\n      if (!$browser && timeout) {\n        timeout.then ? timeout.then(handleTimeout) : $timeout(handleTimeout, timeout);\n      }\n\n      return handleResponse;\n\n      function handleResponse() {\n        var response = wrapped.response(method, url, data, headers);\n        xhr.$$respHeaders = response[2];\n        callback(copy(response[0]), copy(response[1]), xhr.getAllResponseHeaders(),\n                 copy(response[3] || ''));\n      }\n\n      function handleTimeout() {\n        for (var i = 0, ii = responses.length; i < ii; i++) {\n          if (responses[i] === handleResponse) {\n            responses.splice(i, 1);\n            callback(-1, undefined, '');\n            break;\n          }\n        }\n      }\n    }\n\n    if (expectation && expectation.match(method, url)) {\n      if (!expectation.matchData(data)) {\n        throw new Error('Expected ' + expectation + ' with different data\\n' +\n            'EXPECTED: ' + prettyPrint(expectation.data) + '\\nGOT:      ' + data);\n      }\n\n      if (!expectation.matchHeaders(headers)) {\n        throw new Error('Expected ' + expectation + ' with different headers\\n' +\n                        'EXPECTED: ' + prettyPrint(expectation.headers) + '\\nGOT:      ' +\n                        prettyPrint(headers));\n      }\n\n      expectations.shift();\n\n      if (expectation.response) {\n        responses.push(wrapResponse(expectation));\n        return;\n      }\n      wasExpected = true;\n    }\n\n    var i = -1, definition;\n    while ((definition = definitions[++i])) {\n      if (definition.match(method, url, data, headers || {})) {\n        if (definition.response) {\n          // if $browser specified, we do auto flush all requests\n          ($browser ? $browser.defer : responsesPush)(wrapResponse(definition));\n        } else if (definition.passThrough) {\n          $delegate(method, url, data, callback, headers, timeout, withCredentials);\n        } else throw new Error('No response defined !');\n        return;\n      }\n    }\n    throw wasExpected ?\n        new Error('No response defined !') :\n        new Error('Unexpected request: ' + method + ' ' + url + '\\n' +\n                  (expectation ? 'Expected ' + expectation : 'No more request expected'));\n  }\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#when\n   * @description\n   * Creates a new backend definition.\n   *\n   * @param {string} method HTTP method.\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives\n   *   data string and returns true if the data is as expected.\n   * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header\n   *   object and returns true if the headers match the current definition.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   *   request is handled. You can save this object for later use and invoke `respond` again in\n   *   order to change how a matched request is handled.\n   *\n   *  - respond –\n   *      `{function([status,] data[, headers, statusText])\n   *      | function(function(method, url, data, headers)}`\n   *    – The respond method takes a set of static data to be returned or a function that can\n   *    return an array containing response status (number), response data (string), response\n   *    headers (Object), and the text for the status (string). The respond method returns the\n   *    `requestHandler` object for possible overrides.\n   */\n  $httpBackend.when = function(method, url, data, headers) {\n    var definition = new MockHttpExpectation(method, url, data, headers),\n        chain = {\n          respond: function(status, data, headers, statusText) {\n            definition.passThrough = undefined;\n            definition.response = createResponse(status, data, headers, statusText);\n            return chain;\n          }\n        };\n\n    if ($browser) {\n      chain.passThrough = function() {\n        definition.response = undefined;\n        definition.passThrough = true;\n        return chain;\n      };\n    }\n\n    definitions.push(definition);\n    return chain;\n  };\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#whenGET\n   * @description\n   * Creates a new backend definition for GET requests. For more info see `when()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(Object|function(Object))=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   * request is handled. You can save this object for later use and invoke `respond` again in\n   * order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#whenHEAD\n   * @description\n   * Creates a new backend definition for HEAD requests. For more info see `when()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(Object|function(Object))=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   * request is handled. You can save this object for later use and invoke `respond` again in\n   * order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#whenDELETE\n   * @description\n   * Creates a new backend definition for DELETE requests. For more info see `when()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(Object|function(Object))=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   * request is handled. You can save this object for later use and invoke `respond` again in\n   * order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#whenPOST\n   * @description\n   * Creates a new backend definition for POST requests. For more info see `when()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives\n   *   data string and returns true if the data is as expected.\n   * @param {(Object|function(Object))=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   * request is handled. You can save this object for later use and invoke `respond` again in\n   * order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#whenPUT\n   * @description\n   * Creates a new backend definition for PUT requests.  For more info see `when()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives\n   *   data string and returns true if the data is as expected.\n   * @param {(Object|function(Object))=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   * request is handled. You can save this object for later use and invoke `respond` again in\n   * order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#whenJSONP\n   * @description\n   * Creates a new backend definition for JSONP requests. For more info see `when()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   * request is handled. You can save this object for later use and invoke `respond` again in\n   * order to change how a matched request is handled.\n   */\n  createShortMethods('when');\n\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#expect\n   * @description\n   * Creates a new request expectation.\n   *\n   * @param {string} method HTTP method.\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\n   *  receives data string and returns true if the data is as expected, or Object if request body\n   *  is in JSON format.\n   * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header\n   *   object and returns true if the headers match the current expectation.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   *  request is handled. You can save this object for later use and invoke `respond` again in\n   *  order to change how a matched request is handled.\n   *\n   *  - respond –\n   *    `{function([status,] data[, headers, statusText])\n   *    | function(function(method, url, data, headers)}`\n   *    – The respond method takes a set of static data to be returned or a function that can\n   *    return an array containing response status (number), response data (string), response\n   *    headers (Object), and the text for the status (string). The respond method returns the\n   *    `requestHandler` object for possible overrides.\n   */\n  $httpBackend.expect = function(method, url, data, headers) {\n    var expectation = new MockHttpExpectation(method, url, data, headers),\n        chain = {\n          respond: function(status, data, headers, statusText) {\n            expectation.response = createResponse(status, data, headers, statusText);\n            return chain;\n          }\n        };\n\n    expectations.push(expectation);\n    return chain;\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#expectGET\n   * @description\n   * Creates a new request expectation for GET requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {Object=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   * request is handled. You can save this object for later use and invoke `respond` again in\n   * order to change how a matched request is handled. See #expect for more info.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#expectHEAD\n   * @description\n   * Creates a new request expectation for HEAD requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {Object=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   *   request is handled. You can save this object for later use and invoke `respond` again in\n   *   order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#expectDELETE\n   * @description\n   * Creates a new request expectation for DELETE requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {Object=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   *   request is handled. You can save this object for later use and invoke `respond` again in\n   *   order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#expectPOST\n   * @description\n   * Creates a new request expectation for POST requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\n   *  receives data string and returns true if the data is as expected, or Object if request body\n   *  is in JSON format.\n   * @param {Object=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   *   request is handled. You can save this object for later use and invoke `respond` again in\n   *   order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#expectPUT\n   * @description\n   * Creates a new request expectation for PUT requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\n   *  receives data string and returns true if the data is as expected, or Object if request body\n   *  is in JSON format.\n   * @param {Object=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   *   request is handled. You can save this object for later use and invoke `respond` again in\n   *   order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#expectPATCH\n   * @description\n   * Creates a new request expectation for PATCH requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n   *   and returns true if the url matches the current definition.\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\n   *  receives data string and returns true if the data is as expected, or Object if request body\n   *  is in JSON format.\n   * @param {Object=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   *   request is handled. You can save this object for later use and invoke `respond` again in\n   *   order to change how a matched request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#expectJSONP\n   * @description\n   * Creates a new request expectation for JSONP requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives an url\n   *   and returns true if the url matches the current definition.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   *   request is handled. You can save this object for later use and invoke `respond` again in\n   *   order to change how a matched request is handled.\n   */\n  createShortMethods('expect');\n\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#flush\n   * @description\n   * Flushes all pending requests using the trained responses.\n   *\n   * @param {number=} count Number of responses to flush (in the order they arrived). If undefined,\n   *   all pending requests will be flushed. If there are no pending requests when the flush method\n   *   is called an exception is thrown (as this typically a sign of programming error).\n   */\n  $httpBackend.flush = function(count, digest) {\n    if (digest !== false) $rootScope.$digest();\n    if (!responses.length) throw new Error('No pending request to flush !');\n\n    if (angular.isDefined(count) && count !== null) {\n      while (count--) {\n        if (!responses.length) throw new Error('No more pending request to flush !');\n        responses.shift()();\n      }\n    } else {\n      while (responses.length) {\n        responses.shift()();\n      }\n    }\n    $httpBackend.verifyNoOutstandingExpectation(digest);\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#verifyNoOutstandingExpectation\n   * @description\n   * Verifies that all of the requests defined via the `expect` api were made. If any of the\n   * requests were not made, verifyNoOutstandingExpectation throws an exception.\n   *\n   * Typically, you would call this method following each test case that asserts requests using an\n   * \"afterEach\" clause.\n   *\n   * ```js\n   *   afterEach($httpBackend.verifyNoOutstandingExpectation);\n   * ```\n   */\n  $httpBackend.verifyNoOutstandingExpectation = function(digest) {\n    if (digest !== false) $rootScope.$digest();\n    if (expectations.length) {\n      throw new Error('Unsatisfied requests: ' + expectations.join(', '));\n    }\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#verifyNoOutstandingRequest\n   * @description\n   * Verifies that there are no outstanding requests that need to be flushed.\n   *\n   * Typically, you would call this method following each test case that asserts requests using an\n   * \"afterEach\" clause.\n   *\n   * ```js\n   *   afterEach($httpBackend.verifyNoOutstandingRequest);\n   * ```\n   */\n  $httpBackend.verifyNoOutstandingRequest = function() {\n    if (responses.length) {\n      throw new Error('Unflushed requests: ' + responses.length);\n    }\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name $httpBackend#resetExpectations\n   * @description\n   * Resets all request expectations, but preserves all backend definitions. Typically, you would\n   * call resetExpectations during a multiple-phase test when you want to reuse the same instance of\n   * $httpBackend mock.\n   */\n  $httpBackend.resetExpectations = function() {\n    expectations.length = 0;\n    responses.length = 0;\n  };\n\n  return $httpBackend;\n\n\n  function createShortMethods(prefix) {\n    angular.forEach(['GET', 'DELETE', 'JSONP', 'HEAD'], function(method) {\n     $httpBackend[prefix + method] = function(url, headers) {\n       return $httpBackend[prefix](method, url, undefined, headers);\n     };\n    });\n\n    angular.forEach(['PUT', 'POST', 'PATCH'], function(method) {\n      $httpBackend[prefix + method] = function(url, data, headers) {\n        return $httpBackend[prefix](method, url, data, headers);\n      };\n    });\n  }\n}\n\nfunction MockHttpExpectation(method, url, data, headers) {\n\n  this.data = data;\n  this.headers = headers;\n\n  this.match = function(m, u, d, h) {\n    if (method != m) return false;\n    if (!this.matchUrl(u)) return false;\n    if (angular.isDefined(d) && !this.matchData(d)) return false;\n    if (angular.isDefined(h) && !this.matchHeaders(h)) return false;\n    return true;\n  };\n\n  this.matchUrl = function(u) {\n    if (!url) return true;\n    if (angular.isFunction(url.test)) return url.test(u);\n    if (angular.isFunction(url)) return url(u);\n    return url == u;\n  };\n\n  this.matchHeaders = function(h) {\n    if (angular.isUndefined(headers)) return true;\n    if (angular.isFunction(headers)) return headers(h);\n    return angular.equals(headers, h);\n  };\n\n  this.matchData = function(d) {\n    if (angular.isUndefined(data)) return true;\n    if (data && angular.isFunction(data.test)) return data.test(d);\n    if (data && angular.isFunction(data)) return data(d);\n    if (data && !angular.isString(data)) {\n      return angular.equals(angular.fromJson(angular.toJson(data)), angular.fromJson(d));\n    }\n    return data == d;\n  };\n\n  this.toString = function() {\n    return method + ' ' + url;\n  };\n}\n\nfunction createMockXhr() {\n  return new MockXhr();\n}\n\nfunction MockXhr() {\n\n  // hack for testing $http, $httpBackend\n  MockXhr.$$lastInstance = this;\n\n  this.open = function(method, url, async) {\n    this.$$method = method;\n    this.$$url = url;\n    this.$$async = async;\n    this.$$reqHeaders = {};\n    this.$$respHeaders = {};\n  };\n\n  this.send = function(data) {\n    this.$$data = data;\n  };\n\n  this.setRequestHeader = function(key, value) {\n    this.$$reqHeaders[key] = value;\n  };\n\n  this.getResponseHeader = function(name) {\n    // the lookup must be case insensitive,\n    // that's why we try two quick lookups first and full scan last\n    var header = this.$$respHeaders[name];\n    if (header) return header;\n\n    name = angular.lowercase(name);\n    header = this.$$respHeaders[name];\n    if (header) return header;\n\n    header = undefined;\n    angular.forEach(this.$$respHeaders, function(headerVal, headerName) {\n      if (!header && angular.lowercase(headerName) == name) header = headerVal;\n    });\n    return header;\n  };\n\n  this.getAllResponseHeaders = function() {\n    var lines = [];\n\n    angular.forEach(this.$$respHeaders, function(value, key) {\n      lines.push(key + ': ' + value);\n    });\n    return lines.join('\\n');\n  };\n\n  this.abort = angular.noop;\n}\n\n\n/**\n * @ngdoc service\n * @name $timeout\n * @description\n *\n * This service is just a simple decorator for {@link ng.$timeout $timeout} service\n * that adds a \"flush\" and \"verifyNoPendingTasks\" methods.\n */\n\nangular.mock.$TimeoutDecorator = ['$delegate', '$browser', function($delegate, $browser) {\n\n  /**\n   * @ngdoc method\n   * @name $timeout#flush\n   * @description\n   *\n   * Flushes the queue of pending tasks.\n   *\n   * @param {number=} delay maximum timeout amount to flush up until\n   */\n  $delegate.flush = function(delay) {\n    $browser.defer.flush(delay);\n  };\n\n  /**\n   * @ngdoc method\n   * @name $timeout#verifyNoPendingTasks\n   * @description\n   *\n   * Verifies that there are no pending tasks that need to be flushed.\n   */\n  $delegate.verifyNoPendingTasks = function() {\n    if ($browser.deferredFns.length) {\n      throw new Error('Deferred tasks to flush (' + $browser.deferredFns.length + '): ' +\n          formatPendingTasksAsString($browser.deferredFns));\n    }\n  };\n\n  function formatPendingTasksAsString(tasks) {\n    var result = [];\n    angular.forEach(tasks, function(task) {\n      result.push('{id: ' + task.id + ', ' + 'time: ' + task.time + '}');\n    });\n\n    return result.join(', ');\n  }\n\n  return $delegate;\n}];\n\nangular.mock.$RAFDecorator = ['$delegate', function($delegate) {\n  var rafFn = function(fn) {\n    var index = rafFn.queue.length;\n    rafFn.queue.push(fn);\n    return function() {\n      rafFn.queue.splice(index, 1);\n    };\n  };\n\n  rafFn.queue = [];\n  rafFn.supported = $delegate.supported;\n\n  rafFn.flush = function() {\n    if (rafFn.queue.length === 0) {\n      throw new Error('No rAF callbacks present');\n    }\n\n    var length = rafFn.queue.length;\n    for (var i = 0; i < length; i++) {\n      rafFn.queue[i]();\n    }\n\n    rafFn.queue = rafFn.queue.slice(i);\n  };\n\n  return rafFn;\n}];\n\n/**\n *\n */\nangular.mock.$RootElementProvider = function() {\n  this.$get = function() {\n    return angular.element('<div ng-app></div>');\n  };\n};\n\n/**\n * @ngdoc service\n * @name $controller\n * @description\n * A decorator for {@link ng.$controller} with additional `bindings` parameter, useful when testing\n * controllers of directives that use {@link $compile#-bindtocontroller- `bindToController`}.\n *\n *\n * ## Example\n *\n * ```js\n *\n * // Directive definition ...\n *\n * myMod.directive('myDirective', {\n *   controller: 'MyDirectiveController',\n *   bindToController: {\n *     name: '@'\n *   }\n * });\n *\n *\n * // Controller definition ...\n *\n * myMod.controller('MyDirectiveController', ['log', function($log) {\n *   $log.info(this.name);\n * })];\n *\n *\n * // In a test ...\n *\n * describe('myDirectiveController', function() {\n *   it('should write the bound name to the log', inject(function($controller, $log) {\n *     var ctrl = $controller('MyDirectiveController', { /* no locals &#42;/ }, { name: 'Clark Kent' });\n *     expect(ctrl.name).toEqual('Clark Kent');\n *     expect($log.info.logs).toEqual(['Clark Kent']);\n *   });\n * });\n *\n * ```\n *\n * @param {Function|string} constructor If called with a function then it's considered to be the\n *    controller constructor function. Otherwise it's considered to be a string which is used\n *    to retrieve the controller constructor using the following steps:\n *\n *    * check if a controller with given name is registered via `$controllerProvider`\n *    * check if evaluating the string on the current scope returns a constructor\n *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global\n *      `window` object (not recommended)\n *\n *    The string can use the `controller as property` syntax, where the controller instance is published\n *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this\n *    to work correctly.\n *\n * @param {Object} locals Injection locals for Controller.\n * @param {Object=} bindings Properties to add to the controller before invoking the constructor. This is used\n *                           to simulate the `bindToController` feature and simplify certain kinds of tests.\n * @return {Object} Instance of given controller.\n */\nangular.mock.$ControllerDecorator = ['$delegate', function($delegate) {\n  return function(expression, locals, later, ident) {\n    if (later && typeof later === 'object') {\n      var create = $delegate(expression, locals, true, ident);\n      angular.extend(create.instance, later);\n      return create();\n    }\n    return $delegate(expression, locals, later, ident);\n  };\n}];\n\n\n/**\n * @ngdoc module\n * @name ngMock\n * @packageName angular-mocks\n * @description\n *\n * # ngMock\n *\n * The `ngMock` module provides support to inject and mock Angular services into unit tests.\n * In addition, ngMock also extends various core ng services such that they can be\n * inspected and controlled in a synchronous manner within test code.\n *\n *\n * <div doc-module-components=\"ngMock\"></div>\n *\n */\nangular.module('ngMock', ['ng']).provider({\n  $browser: angular.mock.$BrowserProvider,\n  $exceptionHandler: angular.mock.$ExceptionHandlerProvider,\n  $log: angular.mock.$LogProvider,\n  $interval: angular.mock.$IntervalProvider,\n  $httpBackend: angular.mock.$HttpBackendProvider,\n  $rootElement: angular.mock.$RootElementProvider\n}).config(['$provide', function($provide) {\n  $provide.decorator('$timeout', angular.mock.$TimeoutDecorator);\n  $provide.decorator('$$rAF', angular.mock.$RAFDecorator);\n  $provide.decorator('$rootScope', angular.mock.$RootScopeDecorator);\n  $provide.decorator('$controller', angular.mock.$ControllerDecorator);\n}]);\n\n/**\n * @ngdoc module\n * @name ngMockE2E\n * @module ngMockE2E\n * @packageName angular-mocks\n * @description\n *\n * The `ngMockE2E` is an angular module which contains mocks suitable for end-to-end testing.\n * Currently there is only one mock present in this module -\n * the {@link ngMockE2E.$httpBackend e2e $httpBackend} mock.\n */\nangular.module('ngMockE2E', ['ng']).config(['$provide', function($provide) {\n  $provide.decorator('$httpBackend', angular.mock.e2e.$httpBackendDecorator);\n}]);\n\n/**\n * @ngdoc service\n * @name $httpBackend\n * @module ngMockE2E\n * @description\n * Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of\n * applications that use the {@link ng.$http $http service}.\n *\n * *Note*: For fake http backend implementation suitable for unit testing please see\n * {@link ngMock.$httpBackend unit-testing $httpBackend mock}.\n *\n * This implementation can be used to respond with static or dynamic responses via the `when` api\n * and its shortcuts (`whenGET`, `whenPOST`, etc) and optionally pass through requests to the\n * real $httpBackend for specific requests (e.g. to interact with certain remote apis or to fetch\n * templates from a webserver).\n *\n * As opposed to unit-testing, in an end-to-end testing scenario or in scenario when an application\n * is being developed with the real backend api replaced with a mock, it is often desirable for\n * certain category of requests to bypass the mock and issue a real http request (e.g. to fetch\n * templates or static files from the webserver). To configure the backend with this behavior\n * use the `passThrough` request handler of `when` instead of `respond`.\n *\n * Additionally, we don't want to manually have to flush mocked out requests like we do during unit\n * testing. For this reason the e2e $httpBackend flushes mocked out requests\n * automatically, closely simulating the behavior of the XMLHttpRequest object.\n *\n * To setup the application to run with this http backend, you have to create a module that depends\n * on the `ngMockE2E` and your application modules and defines the fake backend:\n *\n * ```js\n *   myAppDev = angular.module('myAppDev', ['myApp', 'ngMockE2E']);\n *   myAppDev.run(function($httpBackend) {\n *     phones = [{name: 'phone1'}, {name: 'phone2'}];\n *\n *     // returns the current list of phones\n *     $httpBackend.whenGET('/phones').respond(phones);\n *\n *     // adds a new phone to the phones array\n *     $httpBackend.whenPOST('/phones').respond(function(method, url, data) {\n *       var phone = angular.fromJson(data);\n *       phones.push(phone);\n *       return [200, phone, {}];\n *     });\n *     $httpBackend.whenGET(/^\\/templates\\//).passThrough();\n *     //...\n *   });\n * ```\n *\n * Afterwards, bootstrap your app with this new module.\n */\n\n/**\n * @ngdoc method\n * @name $httpBackend#when\n * @module ngMockE2E\n * @description\n * Creates a new backend definition.\n *\n * @param {string} method HTTP method.\n * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n *   and returns true if the url matches the current definition.\n * @param {(string|RegExp)=} data HTTP request body.\n * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header\n *   object and returns true if the headers match the current definition.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled. You can save this object for later use and invoke\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\n *\n *  - respond –\n *    `{function([status,] data[, headers, statusText])\n *    | function(function(method, url, data, headers)}`\n *    – The respond method takes a set of static data to be returned or a function that can return\n *    an array containing response status (number), response data (string), response headers\n *    (Object), and the text for the status (string).\n *  - passThrough – `{function()}` – Any request matching a backend definition with\n *    `passThrough` handler will be passed through to the real backend (an XHR request will be made\n *    to the server.)\n *  - Both methods return the `requestHandler` object for possible overrides.\n */\n\n/**\n * @ngdoc method\n * @name $httpBackend#whenGET\n * @module ngMockE2E\n * @description\n * Creates a new backend definition for GET requests. For more info see `when()`.\n *\n * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n *   and returns true if the url matches the current definition.\n * @param {(Object|function(Object))=} headers HTTP headers.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled. You can save this object for later use and invoke\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\n */\n\n/**\n * @ngdoc method\n * @name $httpBackend#whenHEAD\n * @module ngMockE2E\n * @description\n * Creates a new backend definition for HEAD requests. For more info see `when()`.\n *\n * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n *   and returns true if the url matches the current definition.\n * @param {(Object|function(Object))=} headers HTTP headers.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled. You can save this object for later use and invoke\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\n */\n\n/**\n * @ngdoc method\n * @name $httpBackend#whenDELETE\n * @module ngMockE2E\n * @description\n * Creates a new backend definition for DELETE requests. For more info see `when()`.\n *\n * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n *   and returns true if the url matches the current definition.\n * @param {(Object|function(Object))=} headers HTTP headers.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled. You can save this object for later use and invoke\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\n */\n\n/**\n * @ngdoc method\n * @name $httpBackend#whenPOST\n * @module ngMockE2E\n * @description\n * Creates a new backend definition for POST requests. For more info see `when()`.\n *\n * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n *   and returns true if the url matches the current definition.\n * @param {(string|RegExp)=} data HTTP request body.\n * @param {(Object|function(Object))=} headers HTTP headers.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled. You can save this object for later use and invoke\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\n */\n\n/**\n * @ngdoc method\n * @name $httpBackend#whenPUT\n * @module ngMockE2E\n * @description\n * Creates a new backend definition for PUT requests.  For more info see `when()`.\n *\n * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n *   and returns true if the url matches the current definition.\n * @param {(string|RegExp)=} data HTTP request body.\n * @param {(Object|function(Object))=} headers HTTP headers.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled. You can save this object for later use and invoke\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\n */\n\n/**\n * @ngdoc method\n * @name $httpBackend#whenPATCH\n * @module ngMockE2E\n * @description\n * Creates a new backend definition for PATCH requests.  For more info see `when()`.\n *\n * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n *   and returns true if the url matches the current definition.\n * @param {(string|RegExp)=} data HTTP request body.\n * @param {(Object|function(Object))=} headers HTTP headers.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled. You can save this object for later use and invoke\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\n */\n\n/**\n * @ngdoc method\n * @name $httpBackend#whenJSONP\n * @module ngMockE2E\n * @description\n * Creates a new backend definition for JSONP requests. For more info see `when()`.\n *\n * @param {string|RegExp|function(string)} url HTTP url or function that receives a url\n *   and returns true if the url matches the current definition.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled. You can save this object for later use and invoke\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\n */\nangular.mock.e2e = {};\nangular.mock.e2e.$httpBackendDecorator =\n  ['$rootScope', '$timeout', '$delegate', '$browser', createHttpBackendMock];\n\n\n/**\n * @ngdoc type\n * @name $rootScope.Scope\n * @module ngMock\n * @description\n * {@link ng.$rootScope.Scope Scope} type decorated with helper methods useful for testing. These\n * methods are automatically available on any {@link ng.$rootScope.Scope Scope} instance when\n * `ngMock` module is loaded.\n *\n * In addition to all the regular `Scope` methods, the following helper methods are available:\n */\nangular.mock.$RootScopeDecorator = ['$delegate', function($delegate) {\n\n  var $rootScopePrototype = Object.getPrototypeOf($delegate);\n\n  $rootScopePrototype.$countChildScopes = countChildScopes;\n  $rootScopePrototype.$countWatchers = countWatchers;\n\n  return $delegate;\n\n  // ------------------------------------------------------------------------------------------ //\n\n  /**\n   * @ngdoc method\n   * @name $rootScope.Scope#$countChildScopes\n   * @module ngMock\n   * @description\n   * Counts all the direct and indirect child scopes of the current scope.\n   *\n   * The current scope is excluded from the count. The count includes all isolate child scopes.\n   *\n   * @returns {number} Total number of child scopes.\n   */\n  function countChildScopes() {\n    // jshint validthis: true\n    var count = 0; // exclude the current scope\n    var pendingChildHeads = [this.$$childHead];\n    var currentScope;\n\n    while (pendingChildHeads.length) {\n      currentScope = pendingChildHeads.shift();\n\n      while (currentScope) {\n        count += 1;\n        pendingChildHeads.push(currentScope.$$childHead);\n        currentScope = currentScope.$$nextSibling;\n      }\n    }\n\n    return count;\n  }\n\n\n  /**\n   * @ngdoc method\n   * @name $rootScope.Scope#$countWatchers\n   * @module ngMock\n   * @description\n   * Counts all the watchers of direct and indirect child scopes of the current scope.\n   *\n   * The watchers of the current scope are included in the count and so are all the watchers of\n   * isolate child scopes.\n   *\n   * @returns {number} Total number of watchers.\n   */\n  function countWatchers() {\n    // jshint validthis: true\n    var count = this.$$watchers ? this.$$watchers.length : 0; // include the current scope\n    var pendingChildHeads = [this.$$childHead];\n    var currentScope;\n\n    while (pendingChildHeads.length) {\n      currentScope = pendingChildHeads.shift();\n\n      while (currentScope) {\n        count += currentScope.$$watchers ? currentScope.$$watchers.length : 0;\n        pendingChildHeads.push(currentScope.$$childHead);\n        currentScope = currentScope.$$nextSibling;\n      }\n    }\n\n    return count;\n  }\n}];\n\n\nif (window.jasmine || window.mocha) {\n\n  var currentSpec = null,\n      annotatedFunctions = [],\n      isSpecRunning = function() {\n        return !!currentSpec;\n      };\n\n  angular.mock.$$annotate = angular.injector.$$annotate;\n  angular.injector.$$annotate = function(fn) {\n    if (typeof fn === 'function' && !fn.$inject) {\n      annotatedFunctions.push(fn);\n    }\n    return angular.mock.$$annotate.apply(this, arguments);\n  };\n\n\n  (window.beforeEach || window.setup)(function() {\n    annotatedFunctions = [];\n    currentSpec = this;\n  });\n\n  (window.afterEach || window.teardown)(function() {\n    var injector = currentSpec.$injector;\n\n    annotatedFunctions.forEach(function(fn) {\n      delete fn.$inject;\n    });\n\n    angular.forEach(currentSpec.$modules, function(module) {\n      if (module && module.$$hashKey) {\n        module.$$hashKey = undefined;\n      }\n    });\n\n    currentSpec.$injector = null;\n    currentSpec.$modules = null;\n    currentSpec = null;\n\n    if (injector) {\n      injector.get('$rootElement').off();\n    }\n\n    // clean up jquery's fragment cache\n    angular.forEach(angular.element.fragments, function(val, key) {\n      delete angular.element.fragments[key];\n    });\n\n    MockXhr.$$lastInstance = null;\n\n    angular.forEach(angular.callbacks, function(val, key) {\n      delete angular.callbacks[key];\n    });\n    angular.callbacks.counter = 0;\n  });\n\n  /**\n   * @ngdoc function\n   * @name angular.mock.module\n   * @description\n   *\n   * *NOTE*: This function is also published on window for easy access.<br>\n   * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha\n   *\n   * This function registers a module configuration code. It collects the configuration information\n   * which will be used when the injector is created by {@link angular.mock.inject inject}.\n   *\n   * See {@link angular.mock.inject inject} for usage example\n   *\n   * @param {...(string|Function|Object)} fns any number of modules which are represented as string\n   *        aliases or as anonymous module initialization functions. The modules are used to\n   *        configure the injector. The 'ng' and 'ngMock' modules are automatically loaded. If an\n   *        object literal is passed they will be registered as values in the module, the key being\n   *        the module name and the value being what is returned.\n   */\n  window.module = angular.mock.module = function() {\n    var moduleFns = Array.prototype.slice.call(arguments, 0);\n    return isSpecRunning() ? workFn() : workFn;\n    /////////////////////\n    function workFn() {\n      if (currentSpec.$injector) {\n        throw new Error('Injector already created, can not register a module!');\n      } else {\n        var modules = currentSpec.$modules || (currentSpec.$modules = []);\n        angular.forEach(moduleFns, function(module) {\n          if (angular.isObject(module) && !angular.isArray(module)) {\n            modules.push(function($provide) {\n              angular.forEach(module, function(value, key) {\n                $provide.value(key, value);\n              });\n            });\n          } else {\n            modules.push(module);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * @ngdoc function\n   * @name angular.mock.inject\n   * @description\n   *\n   * *NOTE*: This function is also published on window for easy access.<br>\n   * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha\n   *\n   * The inject function wraps a function into an injectable function. The inject() creates new\n   * instance of {@link auto.$injector $injector} per test, which is then used for\n   * resolving references.\n   *\n   *\n   * ## Resolving References (Underscore Wrapping)\n   * Often, we would like to inject a reference once, in a `beforeEach()` block and reuse this\n   * in multiple `it()` clauses. To be able to do this we must assign the reference to a variable\n   * that is declared in the scope of the `describe()` block. Since we would, most likely, want\n   * the variable to have the same name of the reference we have a problem, since the parameter\n   * to the `inject()` function would hide the outer variable.\n   *\n   * To help with this, the injected parameters can, optionally, be enclosed with underscores.\n   * These are ignored by the injector when the reference name is resolved.\n   *\n   * For example, the parameter `_myService_` would be resolved as the reference `myService`.\n   * Since it is available in the function body as _myService_, we can then assign it to a variable\n   * defined in an outer scope.\n   *\n   * ```\n   * // Defined out reference variable outside\n   * var myService;\n   *\n   * // Wrap the parameter in underscores\n   * beforeEach( inject( function(_myService_){\n   *   myService = _myService_;\n   * }));\n   *\n   * // Use myService in a series of tests.\n   * it('makes use of myService', function() {\n   *   myService.doStuff();\n   * });\n   *\n   * ```\n   *\n   * See also {@link angular.mock.module angular.mock.module}\n   *\n   * ## Example\n   * Example of what a typical jasmine tests looks like with the inject method.\n   * ```js\n   *\n   *   angular.module('myApplicationModule', [])\n   *       .value('mode', 'app')\n   *       .value('version', 'v1.0.1');\n   *\n   *\n   *   describe('MyApp', function() {\n   *\n   *     // You need to load modules that you want to test,\n   *     // it loads only the \"ng\" module by default.\n   *     beforeEach(module('myApplicationModule'));\n   *\n   *\n   *     // inject() is used to inject arguments of all given functions\n   *     it('should provide a version', inject(function(mode, version) {\n   *       expect(version).toEqual('v1.0.1');\n   *       expect(mode).toEqual('app');\n   *     }));\n   *\n   *\n   *     // The inject and module method can also be used inside of the it or beforeEach\n   *     it('should override a version and test the new version is injected', function() {\n   *       // module() takes functions or strings (module aliases)\n   *       module(function($provide) {\n   *         $provide.value('version', 'overridden'); // override version here\n   *       });\n   *\n   *       inject(function(version) {\n   *         expect(version).toEqual('overridden');\n   *       });\n   *     });\n   *   });\n   *\n   * ```\n   *\n   * @param {...Function} fns any number of functions which will be injected using the injector.\n   */\n\n\n\n  var ErrorAddingDeclarationLocationStack = function(e, errorForStack) {\n    this.message = e.message;\n    this.name = e.name;\n    if (e.line) this.line = e.line;\n    if (e.sourceId) this.sourceId = e.sourceId;\n    if (e.stack && errorForStack)\n      this.stack = e.stack + '\\n' + errorForStack.stack;\n    if (e.stackArray) this.stackArray = e.stackArray;\n  };\n  ErrorAddingDeclarationLocationStack.prototype.toString = Error.prototype.toString;\n\n  window.inject = angular.mock.inject = function() {\n    var blockFns = Array.prototype.slice.call(arguments, 0);\n    var errorForStack = new Error('Declaration Location');\n    return isSpecRunning() ? workFn.call(currentSpec) : workFn;\n    /////////////////////\n    function workFn() {\n      var modules = currentSpec.$modules || [];\n      var strictDi = !!currentSpec.$injectorStrict;\n      modules.unshift('ngMock');\n      modules.unshift('ng');\n      var injector = currentSpec.$injector;\n      if (!injector) {\n        if (strictDi) {\n          // If strictDi is enabled, annotate the providerInjector blocks\n          angular.forEach(modules, function(moduleFn) {\n            if (typeof moduleFn === \"function\") {\n              angular.injector.$$annotate(moduleFn);\n            }\n          });\n        }\n        injector = currentSpec.$injector = angular.injector(modules, strictDi);\n        currentSpec.$injectorStrict = strictDi;\n      }\n      for (var i = 0, ii = blockFns.length; i < ii; i++) {\n        if (currentSpec.$injectorStrict) {\n          // If the injector is strict / strictDi, and the spec wants to inject using automatic\n          // annotation, then annotate the function here.\n          injector.annotate(blockFns[i]);\n        }\n        try {\n          /* jshint -W040 *//* Jasmine explicitly provides a `this` object when calling functions */\n          injector.invoke(blockFns[i] || angular.noop, this);\n          /* jshint +W040 */\n        } catch (e) {\n          if (e.stack && errorForStack) {\n            throw new ErrorAddingDeclarationLocationStack(e, errorForStack);\n          }\n          throw e;\n        } finally {\n          errorForStack = null;\n        }\n      }\n    }\n  };\n\n\n  angular.mock.inject.strictDi = function(value) {\n    value = arguments.length ? !!value : true;\n    return isSpecRunning() ? workFn() : workFn;\n\n    function workFn() {\n      if (value !== currentSpec.$injectorStrict) {\n        if (currentSpec.$injector) {\n          throw new Error('Injector already created, can not modify strict annotations');\n        } else {\n          currentSpec.$injectorStrict = value;\n        }\n      }\n    }\n  };\n}\n\n\n})(window, window.angular);\n",
    "var root = this;\n\nroot.context = root.describe;\nroot.xcontext = root.xdescribe;\n",
    "\n/*\njasmine-fixture 1.0.5\nMakes injecting HTML snippets into the DOM easy & clean!\nsite: https://github.com/searls/jasmine-fixture\n*/\n\n\n(function() {\n  var createHTMLBlock;\n\n  (function($) {\n    var jasmineFixture, originalAffix, originalInject, originalJasmineFixture, root, _;\n    root = this;\n    originalJasmineFixture = root.jasmineFixture;\n    originalInject = root.inject;\n    originalAffix = root.affix;\n    _ = function(list) {\n      return {\n        inject: function(iterator, memo) {\n          var item, _i, _len, _results;\n          _results = [];\n          for (_i = 0, _len = list.length; _i < _len; _i++) {\n            item = list[_i];\n            _results.push(memo = iterator(memo, item));\n          }\n          return _results;\n        }\n      };\n    };\n    root.jasmineFixture = function($) {\n      var $whatsTheRootOf, applyAttributes, defaultConfiguration, defaults, init, injectContents, isReady, isString, itLooksLikeHtml, rootId, tidyUp;\n      $.fn.affix = root.affix = function(selectorOptions) {\n        var $top;\n        $top = null;\n        _(selectorOptions.split(/[ ](?=[^\\]]*?(?:\\[|$))/)).inject(function($parent, elementSelector) {\n          var $el;\n          if (elementSelector === \">\") {\n            return $parent;\n          }\n          $el = createHTMLBlock($, elementSelector).appendTo($parent);\n          $top || ($top = $el);\n          return $el;\n        }, $whatsTheRootOf(this));\n        return $top;\n      };\n      $whatsTheRootOf = function(that) {\n        if (that.jquery != null) {\n          return that;\n        } else if ($('#jasmine_content').length > 0) {\n          return $('#jasmine_content');\n        } else {\n          return $('<div id=\"jasmine_content\"></div>').appendTo('body');\n        }\n      };\n      afterEach(function() {\n        return $('#jasmine_content').remove();\n      });\n      isReady = false;\n      rootId = \"specContainer\";\n      defaultConfiguration = {\n        el: \"div\",\n        cssClass: \"\",\n        id: \"\",\n        text: \"\",\n        html: \"\",\n        defaultAttribute: \"class\",\n        attrs: {}\n      };\n      defaults = $.extend({}, defaultConfiguration);\n      $.jasmine = {\n        inject: function(arg, context) {\n          var $toInject, config, parent;\n          if (isReady !== true) {\n            init();\n          }\n          parent = (context ? context : $(\"#\" + rootId));\n          $toInject = void 0;\n          if (itLooksLikeHtml(arg)) {\n            $toInject = $(arg);\n          } else {\n            config = $.extend({}, defaults, arg, {\n              userString: arg\n            });\n            $toInject = $(\"<\" + config.el + \"></\" + config.el + \">\");\n            applyAttributes($toInject, config);\n            injectContents($toInject, config);\n          }\n          return $toInject.appendTo(parent);\n        },\n        configure: function(config) {\n          return $.extend(defaults, config);\n        },\n        restoreDefaults: function() {\n          return defaults = $.extend({}, defaultConfiguration);\n        },\n        noConflict: function() {\n          root.jasmineFixture = originalJasmineFixture;\n          root.inject = originalInject;\n          root.affix = originalAffix;\n          return this;\n        }\n      };\n      $.fn.inject = function(html) {\n        return $.jasmine.inject(html, $(this));\n      };\n      applyAttributes = function($html, config) {\n        var attrs, key, _results;\n        attrs = $.extend({}, {\n          id: config.id,\n          \"class\": config[\"class\"] || config.cssClass\n        }, config.attrs);\n        if (isString(config.userString)) {\n          attrs[config.defaultAttribute] = config.userString;\n        }\n        _results = [];\n        for (key in attrs) {\n          if (attrs[key]) {\n            _results.push($html.attr(key, attrs[key]));\n          } else {\n            _results.push(void 0);\n          }\n        }\n        return _results;\n      };\n      injectContents = function($el, config) {\n        if (config.text && config.html) {\n          throw \"Error: because they conflict, you may only configure inject() to set `html` or `text`, not both! \\n\\nHTML was: \" + config.html + \" \\n\\n Text was: \" + config.text;\n        } else if (config.text) {\n          return $el.text(config.text);\n        } else {\n          if (config.html) {\n            return $el.html(config.html);\n          }\n        }\n      };\n      itLooksLikeHtml = function(arg) {\n        return isString(arg) && arg.indexOf(\"<\") !== -1;\n      };\n      isString = function(arg) {\n        return arg && arg.constructor === String;\n      };\n      init = function() {\n        $(\"body\").append(\"<div id=\\\"\" + rootId + \"\\\"></div>\");\n        return isReady = true;\n      };\n      tidyUp = function() {\n        $(\"#\" + rootId).remove();\n        return isReady = false;\n      };\n      $(function($) {\n        return init();\n      });\n      afterEach(function() {\n        return tidyUp();\n      });\n      return $.jasmine;\n    };\n    if ($) {\n      jasmineFixture = root.jasmineFixture($);\n      return root.inject = root.inject || jasmineFixture.inject;\n    }\n  })(window.jQuery);\n\n  createHTMLBlock = (function() {\n    var bindData, bindEvents, parseAttributes, parseClasses, parseContents, parseEnclosure, parseReferences, parseVariableScope, regAttr, regAttrDfn, regAttrs, regCBrace, regClass, regClasses, regData, regDatas, regEvent, regEvents, regExclamation, regId, regReference, regTag, regTagNotContent, regZenTagDfn;\n    createHTMLBlock = function($, ZenObject, data, functions, indexes) {\n      var ZenCode, arr, block, blockAttrs, blockClasses, blockHTML, blockId, blockTag, blocks, el, el2, els, forScope, indexName, inner, len, obj, origZenCode, paren, result, ret, zc, zo;\n      if ($.isPlainObject(ZenObject)) {\n        ZenCode = ZenObject.main;\n      } else {\n        ZenCode = ZenObject;\n        ZenObject = {\n          main: ZenCode\n        };\n      }\n      origZenCode = ZenCode;\n      if (indexes === undefined) {\n        indexes = {};\n      }\n      if (ZenCode.charAt(0) === \"!\" || $.isArray(data)) {\n        if ($.isArray(data)) {\n          forScope = ZenCode;\n        } else {\n          obj = parseEnclosure(ZenCode, \"!\");\n          obj = obj.substring(obj.indexOf(\":\") + 1, obj.length - 1);\n          forScope = parseVariableScope(ZenCode);\n        }\n        while (forScope.charAt(0) === \"@\") {\n          forScope = parseVariableScope(\"!for:!\" + parseReferences(forScope, ZenObject));\n        }\n        zo = ZenObject;\n        zo.main = forScope;\n        el = $();\n        if (ZenCode.substring(0, 5) === \"!for:\" || $.isArray(data)) {\n          if (!$.isArray(data) && obj.indexOf(\":\") > 0) {\n            indexName = obj.substring(0, obj.indexOf(\":\"));\n            obj = obj.substr(obj.indexOf(\":\") + 1);\n          }\n          arr = ($.isArray(data) ? data : data[obj]);\n          zc = zo.main;\n          if ($.isArray(arr) || $.isPlainObject(arr)) {\n            $.map(arr, function(value, index) {\n              var next;\n              zo.main = zc;\n              if (indexName !== undefined) {\n                indexes[indexName] = index;\n              }\n              if (!$.isPlainObject(value)) {\n                value = {\n                  value: value\n                };\n              }\n              next = createHTMLBlock($, zo, value, functions, indexes);\n              if (el.length !== 0) {\n                return $.each(next, function(index, value) {\n                  return el.push(value);\n                });\n              }\n            });\n          }\n          if (!$.isArray(data)) {\n            ZenCode = ZenCode.substr(obj.length + 6 + forScope.length);\n          } else {\n            ZenCode = \"\";\n          }\n        } else if (ZenCode.substring(0, 4) === \"!if:\") {\n          result = parseContents(\"!\" + obj + \"!\", data, indexes);\n          if (result !== \"undefined\" || result !== \"false\" || result !== \"\") {\n            el = createHTMLBlock($, zo, data, functions, indexes);\n          }\n          ZenCode = ZenCode.substr(obj.length + 5 + forScope.length);\n        }\n        ZenObject.main = ZenCode;\n      } else if (ZenCode.charAt(0) === \"(\") {\n        paren = parseEnclosure(ZenCode, \"(\", \")\");\n        inner = paren.substring(1, paren.length - 1);\n        ZenCode = ZenCode.substr(paren.length);\n        zo = ZenObject;\n        zo.main = inner;\n        el = createHTMLBlock($, zo, data, functions, indexes);\n      } else {\n        blocks = ZenCode.match(regZenTagDfn);\n        block = blocks[0];\n        if (block.length === 0) {\n          return \"\";\n        }\n        if (block.indexOf(\"@\") >= 0) {\n          ZenCode = parseReferences(ZenCode, ZenObject);\n          zo = ZenObject;\n          zo.main = ZenCode;\n          return createHTMLBlock($, zo, data, functions, indexes);\n        }\n        block = parseContents(block, data, indexes);\n        blockClasses = parseClasses($, block);\n        if (regId.test(block)) {\n          blockId = regId.exec(block)[1];\n        }\n        blockAttrs = parseAttributes(block, data);\n        blockTag = (block.charAt(0) === \"{\" ? \"span\" : \"div\");\n        if (ZenCode.charAt(0) !== \"#\" && ZenCode.charAt(0) !== \".\" && ZenCode.charAt(0) !== \"{\") {\n          blockTag = regTag.exec(block)[1];\n        }\n        if (block.search(regCBrace) !== -1) {\n          blockHTML = block.match(regCBrace)[1];\n        }\n        blockAttrs = $.extend(blockAttrs, {\n          id: blockId,\n          \"class\": blockClasses,\n          html: blockHTML\n        });\n        el = $(\"<\" + blockTag + \">\", blockAttrs);\n        el.attr(blockAttrs);\n        el = bindEvents(block, el, functions);\n        el = bindData(block, el, data);\n        ZenCode = ZenCode.substr(blocks[0].length);\n        ZenObject.main = ZenCode;\n      }\n      if (ZenCode.length > 0) {\n        if (ZenCode.charAt(0) === \">\") {\n          if (ZenCode.charAt(1) === \"(\") {\n            zc = parseEnclosure(ZenCode.substr(1), \"(\", \")\");\n            ZenCode = ZenCode.substr(zc.length + 1);\n          } else if (ZenCode.charAt(1) === \"!\") {\n            obj = parseEnclosure(ZenCode.substr(1), \"!\");\n            forScope = parseVariableScope(ZenCode.substr(1));\n            zc = obj + forScope;\n            ZenCode = ZenCode.substr(zc.length + 1);\n          } else {\n            len = Math.max(ZenCode.indexOf(\"+\"), ZenCode.length);\n            zc = ZenCode.substring(1, len);\n            ZenCode = ZenCode.substr(len);\n          }\n          zo = ZenObject;\n          zo.main = zc;\n          els = $(createHTMLBlock($, zo, data, functions, indexes));\n          els.appendTo(el);\n        }\n        if (ZenCode.charAt(0) === \"+\") {\n          zo = ZenObject;\n          zo.main = ZenCode.substr(1);\n          el2 = createHTMLBlock($, zo, data, functions, indexes);\n          $.each(el2, function(index, value) {\n            return el.push(value);\n          });\n        }\n      }\n      ret = el;\n      return ret;\n    };\n    bindData = function(ZenCode, el, data) {\n      var datas, i, split;\n      if (ZenCode.search(regDatas) === 0) {\n        return el;\n      }\n      datas = ZenCode.match(regDatas);\n      if (datas === null) {\n        return el;\n      }\n      i = 0;\n      while (i < datas.length) {\n        split = regData.exec(datas[i]);\n        if (split[3] === undefined) {\n          $(el).data(split[1], data[split[1]]);\n        } else {\n          $(el).data(split[1], data[split[3]]);\n        }\n        i++;\n      }\n      return el;\n    };\n    bindEvents = function(ZenCode, el, functions) {\n      var bindings, fn, i, split;\n      if (ZenCode.search(regEvents) === 0) {\n        return el;\n      }\n      bindings = ZenCode.match(regEvents);\n      if (bindings === null) {\n        return el;\n      }\n      i = 0;\n      while (i < bindings.length) {\n        split = regEvent.exec(bindings[i]);\n        if (split[2] === undefined) {\n          fn = functions[split[1]];\n        } else {\n          fn = functions[split[2]];\n        }\n        $(el).bind(split[1], fn);\n        i++;\n      }\n      return el;\n    };\n    parseAttributes = function(ZenBlock, data) {\n      var attrStrs, attrs, i, parts;\n      if (ZenBlock.search(regAttrDfn) === -1) {\n        return undefined;\n      }\n      attrStrs = ZenBlock.match(regAttrDfn);\n      attrs = {};\n      i = 0;\n      while (i < attrStrs.length) {\n        parts = regAttr.exec(attrStrs[i]);\n        attrs[parts[1]] = \"\";\n        if (parts[3] !== undefined) {\n          attrs[parts[1]] = parseContents(parts[3], data);\n        }\n        i++;\n      }\n      return attrs;\n    };\n    parseClasses = function($, ZenBlock) {\n      var classes, clsString, i;\n      ZenBlock = ZenBlock.match(regTagNotContent)[0];\n      if (ZenBlock.search(regClasses) === -1) {\n        return undefined;\n      }\n      classes = ZenBlock.match(regClasses);\n      clsString = \"\";\n      i = 0;\n      while (i < classes.length) {\n        clsString += \" \" + regClass.exec(classes[i])[1];\n        i++;\n      }\n      return $.trim(clsString);\n    };\n    parseContents = function(ZenBlock, data, indexes) {\n      var html;\n      if (indexes === undefined) {\n        indexes = {};\n      }\n      html = ZenBlock;\n      if (data === undefined) {\n        return html;\n      }\n      while (regExclamation.test(html)) {\n        html = html.replace(regExclamation, function(str, str2) {\n          var begChar, fn, val;\n          begChar = \"\";\n          if (str.indexOf(\"!for:\") > 0 || str.indexOf(\"!if:\") > 0) {\n            return str;\n          }\n          if (str.charAt(0) !== \"!\") {\n            begChar = str.charAt(0);\n            str = str.substring(2, str.length - 1);\n          }\n          fn = new Function(\"data\", \"indexes\", \"var r=undefined;\" + \"with(data){try{r=\" + str + \";}catch(e){}}\" + \"with(indexes){try{if(r===undefined)r=\" + str + \";}catch(e){}}\" + \"return r;\");\n          val = unescape(fn(data, indexes));\n          return begChar + val;\n        });\n      }\n      html = html.replace(/\\\\./g, function(str) {\n        return str.charAt(1);\n      });\n      return unescape(html);\n    };\n    parseEnclosure = function(ZenCode, open, close, count) {\n      var index, ret;\n      if (close === undefined) {\n        close = open;\n      }\n      index = 1;\n      if (count === undefined) {\n        count = (ZenCode.charAt(0) === open ? 1 : 0);\n      }\n      if (count === 0) {\n        return;\n      }\n      while (count > 0 && index < ZenCode.length) {\n        if (ZenCode.charAt(index) === close && ZenCode.charAt(index - 1) !== \"\\\\\") {\n          count--;\n        } else {\n          if (ZenCode.charAt(index) === open && ZenCode.charAt(index - 1) !== \"\\\\\") {\n            count++;\n          }\n        }\n        index++;\n      }\n      ret = ZenCode.substring(0, index);\n      return ret;\n    };\n    parseReferences = function(ZenCode, ZenObject) {\n      ZenCode = ZenCode.replace(regReference, function(str) {\n        var fn;\n        str = str.substr(1);\n        fn = new Function(\"objs\", \"var r=\\\"\\\";\" + \"with(objs){try{\" + \"r=\" + str + \";\" + \"}catch(e){}}\" + \"return r;\");\n        return fn(ZenObject, parseReferences);\n      });\n      return ZenCode;\n    };\n    parseVariableScope = function(ZenCode) {\n      var forCode, rest, tag;\n      if (ZenCode.substring(0, 5) !== \"!for:\" && ZenCode.substring(0, 4) !== \"!if:\") {\n        return undefined;\n      }\n      forCode = parseEnclosure(ZenCode, \"!\");\n      ZenCode = ZenCode.substr(forCode.length);\n      if (ZenCode.charAt(0) === \"(\") {\n        return parseEnclosure(ZenCode, \"(\", \")\");\n      }\n      tag = ZenCode.match(regZenTagDfn)[0];\n      ZenCode = ZenCode.substr(tag.length);\n      if (ZenCode.length === 0 || ZenCode.charAt(0) === \"+\") {\n        return tag;\n      } else if (ZenCode.charAt(0) === \">\") {\n        rest = \"\";\n        rest = parseEnclosure(ZenCode.substr(1), \"(\", \")\", 1);\n        return tag + \">\" + rest;\n      }\n      return undefined;\n    };\n    regZenTagDfn = /([#\\.\\@]?[\\w-]+|\\[([\\w-!?=:\"']+(=\"([^\"]|\\\\\")+\")? {0,})+\\]|\\~[\\w$]+=[\\w$]+|&[\\w$]+(=[\\w$]+)?|[#\\.\\@]?!([^!]|\\\\!)+!){0,}(\\{([^\\}]|\\\\\\})+\\})?/i;\n    regTag = /(\\w+)/i;\n    regId = /#([\\w-!]+)/i;\n    regTagNotContent = /((([#\\.]?[\\w-]+)?(\\[([\\w!]+(=\"([^\"]|\\\\\")+\")? {0,})+\\])?)+)/i;\n    regClasses = /(\\.[\\w-]+)/g;\n    regClass = /\\.([\\w-]+)/i;\n    regReference = /(@[\\w$_][\\w$_\\d]+)/i;\n    regAttrDfn = /(\\[([\\w-!]+(=\"?([^\"]|\\\\\")+\"?)? {0,})+\\])/ig;\n    regAttrs = /([\\w-!]+(=\"([^\"]|\\\\\")+\")?)/g;\n    regAttr = /([\\w-!]+)(=\"?(([^\"\\]]|\\\\\")+)\"?)?/i;\n    regCBrace = /\\{(([^\\}]|\\\\\\})+)\\}/i;\n    regExclamation = /(?:([^\\\\]|^))!([^!]|\\\\!)+!/g;\n    regEvents = /\\~[\\w$]+(=[\\w$]+)?/g;\n    regEvent = /\\~([\\w$]+)=([\\w$]+)/i;\n    regDatas = /&[\\w$]+(=[\\w$]+)?/g;\n    regData = /&([\\w$]+)(=([\\w$]+))?/i;\n    return createHTMLBlock;\n  })();\n\n}).call(this);\n",
    "/* jasmine-given - 2.4.0\n * Adds a Given-When-Then DSL to jasmine as an alternative style for specs\n * https://github.com/searls/jasmine-given\n */\n(function() {\n  (function(jasmine) {\n    var additionalInsightsForErrorMessage, apparentReferenceError, attemptedEquality, comparisonInsight, declareJasmineSpec, deepEqualsNotice, doneWrapperFor, evalInContextOfSpec, finalStatementFrom, getBlock, invariantList, mostRecentExpectations, mostRecentlyUsed, o, root, stringifyExpectation, wasComparison, whenList;\n    mostRecentlyUsed = null;\n    beforeEach(function() {\n      return this.addMatchers(jasmine._given.matchers);\n    });\n    root = this;\n    root.Given = function() {\n      mostRecentlyUsed = root.Given;\n      return beforeEach(getBlock(arguments));\n    };\n    whenList = [];\n    root.When = function() {\n      var b;\n      mostRecentlyUsed = root.When;\n      b = getBlock(arguments);\n      beforeEach(function() {\n        return whenList.push(b);\n      });\n      return afterEach(function() {\n        return whenList.pop();\n      });\n    };\n    invariantList = [];\n    root.Invariant = function(invariantBehavior) {\n      mostRecentlyUsed = root.Invariant;\n      beforeEach(function() {\n        return invariantList.push(invariantBehavior);\n      });\n      return afterEach(function() {\n        return invariantList.pop();\n      });\n    };\n    getBlock = function(thing) {\n      var assignResultTo, setupFunction;\n      setupFunction = o(thing).firstThat(function(arg) {\n        return o(arg).isFunction();\n      });\n      assignResultTo = o(thing).firstThat(function(arg) {\n        return o(arg).isString();\n      });\n      return doneWrapperFor(setupFunction, function(done) {\n        var context, result;\n        context = jasmine.getEnv().currentSpec;\n        result = setupFunction.call(context, done);\n        if (assignResultTo) {\n          if (!context[assignResultTo]) {\n            return context[assignResultTo] = result;\n          } else {\n            throw new Error(\"Unfortunately, the variable '\" + assignResultTo + \"' is already assigned to: \" + context[assignResultTo]);\n          }\n        }\n      });\n    };\n    mostRecentExpectations = null;\n    declareJasmineSpec = function(specArgs, itFunction) {\n      var expectationFunction, expectations, label;\n      if (itFunction == null) {\n        itFunction = it;\n      }\n      label = o(specArgs).firstThat(function(arg) {\n        return o(arg).isString();\n      });\n      expectationFunction = o(specArgs).firstThat(function(arg) {\n        return o(arg).isFunction();\n      });\n      mostRecentlyUsed = root.subsequentThen;\n      mostRecentExpectations = expectations = [expectationFunction];\n      itFunction(\"then \" + (label != null ? label : stringifyExpectation(expectations)), doneWrapperFor(expectationFunction, function(done) {\n        var block, expectation, i, _i, _j, _len, _len1, _ref, _ref1, _results;\n        _ref = whenList != null ? whenList : [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          block = _ref[_i];\n          block();\n        }\n        _ref1 = invariantList.concat(expectations);\n        _results = [];\n        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {\n          expectation = _ref1[i];\n          _results.push(expect(expectation).not.toHaveReturnedFalseFromThen(jasmine.getEnv().currentSpec, i + 1, done));\n        }\n        return _results;\n      }));\n      return {\n        Then: subsequentThen,\n        And: subsequentThen\n      };\n    };\n    doneWrapperFor = function(func, toWrap) {\n      if (func.length === 0) {\n        return function() {\n          return toWrap();\n        };\n      } else {\n        return function(done) {\n          return toWrap(done);\n        };\n      }\n    };\n    root.Then = function() {\n      return declareJasmineSpec(arguments);\n    };\n    root.Then.only = function() {\n      return declareJasmineSpec(arguments, it.only);\n    };\n    root.subsequentThen = function(additionalExpectation) {\n      mostRecentExpectations.push(additionalExpectation);\n      return this;\n    };\n    mostRecentlyUsed = root.Given;\n    root.And = function() {\n      return mostRecentlyUsed.apply(this, jasmine.util.argsToArray(arguments));\n    };\n    o = function(thing) {\n      return {\n        isFunction: function() {\n          return Object.prototype.toString.call(thing) === \"[object Function]\";\n        },\n        isString: function() {\n          return Object.prototype.toString.call(thing) === \"[object String]\";\n        },\n        firstThat: function(test) {\n          var i;\n          i = 0;\n          while (i < thing.length) {\n            if (test(thing[i]) === true) {\n              return thing[i];\n            }\n            i++;\n          }\n          return void 0;\n        }\n      };\n    };\n    jasmine._given = {\n      matchers: {\n        toHaveReturnedFalseFromThen: function(context, n, done) {\n          var e, exception, result;\n          result = false;\n          exception = void 0;\n          try {\n            result = this.actual.call(context, done);\n          } catch (_error) {\n            e = _error;\n            exception = e;\n          }\n          this.message = function() {\n            var msg, stringyExpectation;\n            stringyExpectation = stringifyExpectation(this.actual);\n            msg = \"Then clause\" + (n > 1 ? \" #\" + n : \"\") + \" `\" + stringyExpectation + \"` failed by \";\n            if (exception) {\n              msg += \"throwing: \" + exception.toString();\n            } else {\n              msg += \"returning false\";\n            }\n            msg += additionalInsightsForErrorMessage(stringyExpectation);\n            return msg;\n          };\n          return result === false;\n        }\n      }\n    };\n    stringifyExpectation = function(expectation) {\n      var matches;\n      matches = expectation.toString().replace(/\\n/g, '').match(/function\\s?\\(.*\\)\\s?{\\s*(return\\s+)?(.*?)(;)?\\s*}/i);\n      if (matches && matches.length >= 3) {\n        return matches[2].replace(/\\s+/g, ' ');\n      } else {\n        return \"\";\n      }\n    };\n    additionalInsightsForErrorMessage = function(expectationString) {\n      var comparison, expectation;\n      expectation = finalStatementFrom(expectationString);\n      if (comparison = wasComparison(expectation)) {\n        return comparisonInsight(expectation, comparison);\n      } else {\n        return \"\";\n      }\n    };\n    finalStatementFrom = function(expectationString) {\n      var multiStatement;\n      if (multiStatement = expectationString.match(/.*return (.*)/)) {\n        return multiStatement[multiStatement.length - 1];\n      } else {\n        return expectationString;\n      }\n    };\n    wasComparison = function(expectation) {\n      var comparator, comparison, left, right, s;\n      if (comparison = expectation.match(/(.*) (===|!==|==|!=|>|>=|<|<=) (.*)/)) {\n        s = comparison[0], left = comparison[1], comparator = comparison[2], right = comparison[3];\n        return {\n          left: left,\n          comparator: comparator,\n          right: right\n        };\n      }\n    };\n    comparisonInsight = function(expectation, comparison) {\n      var left, msg, right;\n      left = evalInContextOfSpec(comparison.left);\n      right = evalInContextOfSpec(comparison.right);\n      if (apparentReferenceError(left) && apparentReferenceError(right)) {\n        return \"\";\n      }\n      msg = \"\\n\\nThis comparison was detected:\\n  \" + expectation + \"\\n  \" + left + \" \" + comparison.comparator + \" \" + right;\n      if (attemptedEquality(left, right, comparison.comparator)) {\n        msg += \"\\n\\n\" + (deepEqualsNotice(comparison.left, comparison.right));\n      }\n      return msg;\n    };\n    apparentReferenceError = function(result) {\n      return /^<Error: \"ReferenceError/.test(result);\n    };\n    evalInContextOfSpec = function(operand) {\n      var e;\n      try {\n        return (function() {\n          return eval(operand);\n        }).call(jasmine.getEnv().currentSpec);\n      } catch (_error) {\n        e = _error;\n        return \"<Error: \\\"\" + ((e != null ? typeof e.message === \"function\" ? e.message() : void 0 : void 0) || e) + \"\\\">\";\n      }\n    };\n    attemptedEquality = function(left, right, comparator) {\n      return (comparator === \"==\" || comparator === \"===\") && jasmine.getEnv().equals_(left, right);\n    };\n    return deepEqualsNotice = function(left, right) {\n      return \"However, these items are deeply equal! Try an expectation like this instead:\\n  expect(\" + left + \").toEqual(\" + right + \")\";\n    };\n  })(jasmine);\n\n}).call(this);\n",
    "/* jasmine-only - 0.1.0\n * Exclusivity spec helpers for jasmine: `describe.only` and `it.only`\n * https://github.com/davemo/jasmine-only\n */\n(function() {\n  var __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  (function(jasmine) {\n    var describeOnly, env, itOnly, root;\n\n    root = this;\n    env = jasmine.getEnv();\n    describeOnly = function(description, specDefinitions) {\n      var suite;\n\n      suite = new jasmine.Suite(this, description, null, this.currentSuite);\n      suite.exclusive_ = 1;\n      this.exclusive_ = Math.max(this.exclusive_, 1);\n      return this.describe_(suite, specDefinitions);\n    };\n    itOnly = function(description, func) {\n      var spec;\n\n      spec = this.it(description, func);\n      spec.exclusive_ = 2;\n      this.exclusive_ = 2;\n      return spec;\n    };\n    env.exclusive_ = 0;\n    env.describe = function(description, specDefinitions) {\n      var suite;\n\n      suite = new jasmine.Suite(this, description, null, this.currentSuite);\n      return this.describe_(suite, specDefinitions);\n    };\n    env.describe_ = function(suite, specDefinitions) {\n      var declarationError, e, parentSuite;\n\n      parentSuite = this.currentSuite;\n      if (parentSuite) {\n        parentSuite.add(suite);\n      } else {\n        this.currentRunner_.add(suite);\n      }\n      this.currentSuite = suite;\n      declarationError = null;\n      try {\n        specDefinitions.call(suite);\n      } catch (_error) {\n        e = _error;\n        declarationError = e;\n      }\n      if (declarationError) {\n        this.it(\"encountered a declaration exception\", function() {\n          throw declarationError;\n        });\n      }\n      this.currentSuite = parentSuite;\n      return suite;\n    };\n    env.specFilter = function(spec) {\n      return this.exclusive_ <= spec.exclusive_;\n    };\n    env.describe.only = function() {\n      return describeOnly.apply(env, arguments);\n    };\n    env.it.only = function() {\n      return itOnly.apply(env, arguments);\n    };\n    root.describe.only = function(description, specDefinitions) {\n      return env.describe.only(description, specDefinitions);\n    };\n    root.it.only = function(description, func) {\n      return env.it.only(description, func);\n    };\n    root.iit = root.it.only;\n    root.ddescribe = root.describe.only;\n    jasmine.Spec = (function(_super) {\n      __extends(Spec, _super);\n\n      function Spec(env, suite, description) {\n        this.exclusive_ = suite.exclusive_;\n        Spec.__super__.constructor.call(this, env, suite, description);\n      }\n\n      return Spec;\n\n    })(jasmine.Spec);\n    return jasmine.Suite = (function(_super) {\n      __extends(Suite, _super);\n\n      function Suite(env, suite, specDefinitions, parentSuite) {\n        this.exclusive_ = parentSuite && parentSuite.exclusive_ || 0;\n        Suite.__super__.constructor.call(this, env, suite, specDefinitions, parentSuite);\n      }\n\n      return Suite;\n\n    })(jasmine.Suite);\n  })(jasmine);\n\n}).call(this);\n",
    "/* jasmine-stealth - 0.0.13\n * Makes Jasmine spies a bit more robust\n * https://github.com/searls/jasmine-stealth\n */\n(function() {\n  var Captor, fake, root, stubChainer, unfakes, whatToDoWhenTheSpyGetsCalled, _,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  root = this;\n\n  _ = function(obj) {\n    return {\n      each: function(iterator) {\n        var item, _i, _len, _results;\n        _results = [];\n        for (_i = 0, _len = obj.length; _i < _len; _i++) {\n          item = obj[_i];\n          _results.push(iterator(item));\n        }\n        return _results;\n      },\n      isFunction: function() {\n        return Object.prototype.toString.call(obj) === \"[object Function]\";\n      },\n      isString: function() {\n        return Object.prototype.toString.call(obj) === \"[object String]\";\n      }\n    };\n  };\n\n  root.spyOnConstructor = function(owner, classToFake, methodsToSpy) {\n    var fakeClass, spies;\n    if (methodsToSpy == null) {\n      methodsToSpy = [];\n    }\n    if (_(methodsToSpy).isString()) {\n      methodsToSpy = [methodsToSpy];\n    }\n    spies = {\n      constructor: jasmine.createSpy(\"\" + classToFake + \"'s constructor\")\n    };\n    fakeClass = (function() {\n      function _Class() {\n        spies.constructor.apply(this, arguments);\n      }\n\n      return _Class;\n\n    })();\n    _(methodsToSpy).each(function(methodName) {\n      spies[methodName] = jasmine.createSpy(\"\" + classToFake + \"#\" + methodName);\n      return fakeClass.prototype[methodName] = function() {\n        return spies[methodName].apply(this, arguments);\n      };\n    });\n    fake(owner, classToFake, fakeClass);\n    return spies;\n  };\n\n  unfakes = [];\n\n  afterEach(function() {\n    _(unfakes).each(function(u) {\n      return u();\n    });\n    return unfakes = [];\n  });\n\n  fake = function(owner, thingToFake, newThing) {\n    var originalThing;\n    originalThing = owner[thingToFake];\n    owner[thingToFake] = newThing;\n    return unfakes.push(function() {\n      return owner[thingToFake] = originalThing;\n    });\n  };\n\n  root.stubFor = root.spyOn;\n\n  jasmine.createStub = jasmine.createSpy;\n\n  jasmine.createStubObj = function(baseName, stubbings) {\n    var name, obj, stubbing;\n    if (stubbings.constructor === Array) {\n      return jasmine.createSpyObj(baseName, stubbings);\n    } else {\n      obj = {};\n      for (name in stubbings) {\n        stubbing = stubbings[name];\n        obj[name] = jasmine.createSpy(baseName + \".\" + name);\n        if (_(stubbing).isFunction()) {\n          obj[name].andCallFake(stubbing);\n        } else {\n          obj[name].andReturn(stubbing);\n        }\n      }\n      return obj;\n    }\n  };\n\n  whatToDoWhenTheSpyGetsCalled = function(spy) {\n    var matchesStub, priorStubbing;\n    matchesStub = function(stubbing, args, context) {\n      switch (stubbing.type) {\n        case \"args\":\n          return jasmine.getEnv().equals_(stubbing.ifThis, jasmine.util.argsToArray(args));\n        case \"context\":\n          return jasmine.getEnv().equals_(stubbing.ifThis, context);\n      }\n    };\n    priorStubbing = spy.plan();\n    return spy.andCallFake(function() {\n      var i, stubbing;\n      i = 0;\n      while (i < spy._stealth_stubbings.length) {\n        stubbing = spy._stealth_stubbings[i];\n        if (matchesStub(stubbing, arguments, this)) {\n          if (stubbing.satisfaction === \"callFake\") {\n            return stubbing.thenThat.apply(stubbing, arguments);\n          } else {\n            return stubbing.thenThat;\n          }\n        }\n        i++;\n      }\n      return priorStubbing;\n    });\n  };\n\n  jasmine.Spy.prototype.whenContext = function(context) {\n    var spy;\n    spy = this;\n    spy._stealth_stubbings || (spy._stealth_stubbings = []);\n    whatToDoWhenTheSpyGetsCalled(spy);\n    return stubChainer(spy, \"context\", context);\n  };\n\n  jasmine.Spy.prototype.when = function() {\n    var ifThis, spy;\n    spy = this;\n    ifThis = jasmine.util.argsToArray(arguments);\n    spy._stealth_stubbings || (spy._stealth_stubbings = []);\n    whatToDoWhenTheSpyGetsCalled(spy);\n    return stubChainer(spy, \"args\", ifThis);\n  };\n\n  stubChainer = function(spy, type, ifThis) {\n    var addStubbing;\n    addStubbing = function(satisfaction) {\n      return function(thenThat) {\n        spy._stealth_stubbings.push({\n          type: type,\n          ifThis: ifThis,\n          satisfaction: satisfaction,\n          thenThat: thenThat\n        });\n        return spy;\n      };\n    };\n    return {\n      thenReturn: addStubbing(\"return\"),\n      thenCallFake: addStubbing(\"callFake\")\n    };\n  };\n\n  jasmine.Spy.prototype.mostRecentCallThat = function(callThat, context) {\n    var i;\n    i = this.calls.length - 1;\n    while (i >= 0) {\n      if (callThat.call(context || this, this.calls[i]) === true) {\n        return this.calls[i];\n      }\n      i--;\n    }\n  };\n\n  jasmine.Matchers.ArgThat = (function(_super) {\n    __extends(ArgThat, _super);\n\n    function ArgThat(matcher) {\n      this.matcher = matcher;\n    }\n\n    ArgThat.prototype.jasmineMatches = function(actual) {\n      return this.matcher(actual);\n    };\n\n    return ArgThat;\n\n  })(jasmine.Matchers.Any);\n\n  jasmine.Matchers.ArgThat.prototype.matches = jasmine.Matchers.ArgThat.prototype.jasmineMatches;\n\n  jasmine.argThat = function(expected) {\n    return new jasmine.Matchers.ArgThat(expected);\n  };\n\n  jasmine.Matchers.Capture = (function(_super) {\n    __extends(Capture, _super);\n\n    function Capture(captor) {\n      this.captor = captor;\n    }\n\n    Capture.prototype.jasmineMatches = function(actual) {\n      this.captor.value = actual;\n      return true;\n    };\n\n    return Capture;\n\n  })(jasmine.Matchers.Any);\n\n  jasmine.Matchers.Capture.prototype.matches = jasmine.Matchers.Capture.prototype.jasmineMatches;\n\n  Captor = (function() {\n    function Captor() {}\n\n    Captor.prototype.capture = function() {\n      return new jasmine.Matchers.Capture(this);\n    };\n\n    return Captor;\n\n  })();\n\n  jasmine.captor = function() {\n    return new Captor();\n  };\n\n}).call(this);\n",
    "describe(\"controller: LoginController ($httpBackend.expect().respond, vanilla jasmine, javascript)\", function() {\n\n  beforeEach(function() {\n    module(\"app\");\n  });\n\n  beforeEach(inject(function($controller, $location, $httpBackend) {\n    this.$location = $location;\n    this.$httpBackend = $httpBackend;\n    this.redirect = spyOn($location, 'path');\n    loginController = $controller('LoginController', {\n      $location: $location\n    });\n  }));\n\n  afterEach(function() {\n    this.$httpBackend.verifyNoOutstandingRequest();\n    this.$httpBackend.verifyNoOutstandingExpectation();\n  });\n\n  describe(\"successfully logging in\", function() {\n    it(\"should redirect you to /admin/playlists\", function() {\n      this.$httpBackend.expectPOST('/login', loginController.credentials).respond(200);\n      loginController.login();\n      this.$httpBackend.flush();\n      expect(this.redirect).toHaveBeenCalledWith('/admin/playlists');\n    });\n  });\n});\n",
    "/**\n * Created by rogersaner on 15/09/22.\n */\nddescribe(\"controller: Playlist_editController(vanilla jasmine, javascript)\", function () {\n\n  var playlistController;\n\n  beforeEach(function () {\n    module(\"app\");\n  });\n\n  /**\n   * Given some kind of collection (like playlistController.goals) return the member with SortOrder = sortorder\n   */\n  var returnItemBySortOrder = function (collection, sortorder) {\n    var value = {};\n    var found = false;\n    collection.forEach(function (item) {\n      if (!found && item.SortOrder === sortorder) {\n        value = item;\n      }\n    });\n    return value;\n  };\n\n  beforeEach(inject(function ($controller, $httpBackend, Playlists, Tracks, $rootScope) {\n    this.$httpBackend = $httpBackend;\n    this.Tracks = Tracks;\n    this.Playlists = Playlists;\n\n    // Various ways of working with a Factory\n    //@see http://jasonmore.net/unit-testing-http-service-angular-js/\n\n    // 1. Actually passing the call to the function in the Factory\n    // But I found that these functions are getting called anyway, but the value of\n    // playlistController.goals = Playlists.getGoals() isn't being updated, maybe because the value is being\n    // set in a callback? Dunno.\n\n    //spyOn(Playlists, 'loadGoals').andCallThrough();\n    //spyOn(Playlists, 'getGoals').andCallThrough();\n\n    // 2. Giving a pretend response from a Factory method\n    /*\n    spyOn(Playlists, 'loadGoals').andCallFake(function () {\n      return {\n        success: function (callback) {\n          callback(\n            [\n              {\n                \"id\": 0,\n                \"goal\": \"Warm Up\",\n                \"aim\": \"We want you to ride at 80 - 90 rpm for the duration of the song\",\n                \"bpm_low\": 80,\n                \"bpm_high\": 90,\n                \"goal_options\": [\n                  {\n                    \"id\": 0,\n                    \"name\": \"Half time\",\n                    \"position\": \"Seated\",\n                    \"beat_ratio\": 0.5,\n                    \"effort\": 50,\n                    \"effort_high\": 60\n                  }\n                ]\n              }\n            ]\n          )\n        }\n      };\n    });\n    */\n\n    playlistController = $controller('Playlist_editController', {\n      $httpBackend: $httpBackend,\n      $scope: $rootScope.$new(),\n      Playlists: Playlists,\n      Tracks: Tracks\n    });\n\n    this.createAnewPlaylist = function () {\n      var playlist = this.Playlists.createNewPlaylistFromTemplate(this.playlistTemplate);\n      this.Playlists.setPlaylist(playlist);\n      playlistController.newPlaylist = true;\n      playlistController.playlist = this.Playlists.getPlaylist();\n    };\n\n    this.createAnewFreestylePlaylist = function () {\n      var playlist = this.Playlists.createNewPlaylistFromTemplate(this.playlistFreestyleTemplate);\n      this.Playlists.setPlaylist(playlist);\n      playlistController.newPlaylist = true;\n      playlistController.playlist = this.Playlists.getPlaylist();\n      //playlistController.initFreestylePlaylist(); // This was removed at some point\n    };\n\n    this.editPlaylist = function () {\n      this.Playlists.setPlaylist(this.playlist);\n      playlistController.newPlaylist = false;\n      playlistController.playlist = this.Playlists.getPlaylist();\n    };\n\n    this.giveThePlaylistAname = function () {\n      playlistController.playlist.Name = 'Awesome playlist';\n    };\n\n    this.removeThePlaylistname = function () {\n      playlistController.playlist.Name = '';\n    };\n\n    this.setPlaylistComplete = function (complete) {\n      playlistController.playlist.Complete = complete;\n    };\n\n    this.setPlaylistIsSyncedToGyms = function(isSynced) {\n      playlistController.playlist.IsSyncedToGyms = isSynced;\n      if (!isSynced) {\n        playlistController.newPlaylist = true;\n      }\n    };\n\n\n    /****** Playlist add/edit tests because they're called multiple times ******/\n\n    this.testTrackCanBeAddedToTheFirstGoal = function () {\n      this.Playlists.addTrackToGoalPlaylist(0, this.trackNormal);\n\n      expect(playlistController.playlist.PlaylistGoals[0].PlaylistGoalTracks[0].Track.Name).toEqual('Hello');\n    };\n\n    this.testTrackCanBeRemovedFromAgoal = function () {\n      this.Playlists.addTrackToGoalPlaylist(0, this.trackNormal);\n\n      playlistController.removeTrack(0, this.trackNormal);\n\n      expect(playlistController.playlist.PlaylistGoals[0].PlaylistGoalTracks.length).toBe(0);\n    };\n\n    this.testTrackCounterCorrectAfterAddingSong = function () {\n      this.Playlists.addTrackToGoalPlaylist(0, this.trackNormal);\n\n      playlistController.playlistTracksLength = this.Playlists.getPlaylistLength();\n\n      expect(playlistController.playlistTracksLength).toEqual(260);\n    };\n\n    this.testTrackCounterCorrectAfterAddingTwoSongs = function () {\n      this.Playlists.addTrackToGoalPlaylist(0, this.trackNormal);\n      this.Playlists.addTrackToGoalPlaylist(1, this.trackShort);\n\n      playlistController.playlistTracksLength = this.Playlists.getPlaylistLength();\n\n      expect(playlistController.playlistTracksLength).toEqual(320);\n    };\n\n    this.testTrackCounterCorrectAfterAddingManySongs = function () {\n      this.Playlists.addTrackToGoalPlaylist(0, this.trackNormal);\n      this.Playlists.addTrackToGoalPlaylist(1, this.trackShort);\n      this.Playlists.addTrackToGoalPlaylist(2, this.trackNormal);\n      this.Playlists.addTrackToGoalPlaylist(3, this.trackShort);\n      this.Playlists.addTrackToGoalPlaylist(4, this.trackNormal);\n      this.Playlists.addTrackToGoalPlaylist(5, this.trackShort);\n      this.Playlists.addTrackToGoalPlaylist(6, this.trackShort);\n      this.Playlists.addTrackToGoalPlaylist(7, this.trackLong);\n\n      playlistController.playlistTracksLength = this.Playlists.getPlaylistLength();\n\n      expect(playlistController.playlistTracksLength).toEqual(1620);\n    };\n\n    this.testTrackCounterCorrectAfterAddingAndRemovingSongs = function () {\n      this.Playlists.addTrackToGoalPlaylist(0, this.trackNormal);\n      this.Playlists.addTrackToGoalPlaylist(1, this.trackShort);\n      this.Playlists.addTrackToGoalPlaylist(2, this.trackNormal);\n      this.Playlists.addTrackToGoalPlaylist(3, this.trackShort);\n      this.Playlists.addTrackToGoalPlaylist(4, this.trackNormal);\n      playlistController.removeTrack(0, this.trackNormal);\n      this.Playlists.addTrackToGoalPlaylist(5, this.trackShort);\n      this.Playlists.addTrackToGoalPlaylist(6, this.trackShort);\n      this.Playlists.addTrackToGoalPlaylist(7, this.trackLong);\n      playlistController.removeTrack(6, this.trackShort);\n\n      playlistController.playlistTracksLength = this.Playlists.getPlaylistLength();\n\n      expect(playlistController.playlistTracksLength).toEqual(1300);\n    };\n\n    this.givePlaylistSomeTracks = function (track, fillTheEntirePlaylist) {\n      var k = 5;\n      if (fillTheEntirePlaylist) {\n        k = 11;\n      }\n      for (var i = 0; i < k; i++) {\n        this.Playlists.addTrackToGoalPlaylist(i, track);\n      }\n    };\n\n    this.fillPlaylistWithTracks = function (track) {\n      this.givePlaylistSomeTracks(track, true);\n    };\n\n    this.removeAllTracks = function (track) {\n      for (var i = 0; i < 11; i++) {\n        playlistController.removeTrack(i, track);\n      }\n    };\n\n    // Set values of goals, currentgoal, Tracks and Playlist. Mock all this data! It's a damn unit test!\n    // We don't care about the quality of data which other things are giving us. At all. That can be tested separately.\n    // (We do want to use the structure of data which the API is returning, though.)\n    // What we care about is, does this unit of functionality in this controller work? That's all.\n\n    // Set up some tracks\n    this.trackNormal = {\n      \"Name\": \"Hello\",\n      \"Album\": \"Hello\",\n      \"Artist\": \"Adele\",\n      \"Bpm\": 82,\n      \"DurationSeconds\": 260,\n      \"Source\": \"http://l3.simfyafrica.com/data/3/7/a/9/37a96fa3f8ac31e10d7c24eb984c74c3?nvb=20151129210306&nva=20151202070415&encoded=0e3ece39d05351c826b15\",\n      \"CoverImgUrl\": \"http://www.simfy.co.za/photos/tracks/54525247/320.jpg\",\n      \"MusicProviderTrackId\": \"54525247\",\n      \"MusicProviderId\": \"6fde5180-3a6f-4230-aea7-c607c726616f\",\n      \"GenreId\": \"31db3a05-30c7-4058-94a6-504046d4b178\",\n      \"Genre\": {\n        \"Name\": \"Pop\",\n        \"Id\": \"31db3a05-30c7-4058-94a6-504046d4b178\"\n      }\n    };\n    this.trackShort = {\n      \"Name\": \"The Wolf\",\n      \"Album\": \"Wilder Mind\",\n      \"Artist\": \"Mumford & Sons\",\n      \"Bpm\": 135,\n      \"DurationSeconds\": 60,\n      \"Source\": \"http://l3.simfyafrica.com/data/d/4/1/d/d41d773f4bfc03be65d4e4b4d6b47c43?nvb=20151129222204&nva=20151202070524&encoded=06ad3e442a06912e43d41\",\n      \"CoverImgUrl\": \"http://www.simfy.co.za/photos/tracks/50503094/320.jpg\",\n      \"MusicProviderTrackId\": \"50503094\",\n      \"MusicProviderId\": \"6fde5180-3a6f-4230-aea7-c607c726616f\",\n      \"GenreId\": \"7c87cd38-cdad-4bb7-9380-2b9121f7eef3\",\n      \"Genre\": {\n        \"Name\": \"Alternative\",\n        \"Id\": \"7c87cd38-cdad-4bb7-9380-2b9121f7eef3\"\n      }\n    };\n    this.trackLong = {\n      \"Name\": \"Concerto No. 21 in C Major for Piano and Orchestra, K. 467: II. Andante (\\\"Elvira Madigan\\\")\",\n      \"Album\": \"Homework Hits, Vol. 5: Mozart\",\n      \"Artist\": \"Wolfgang Amadeus Mozart\",\n      \"Bpm\": 125,\n      \"DurationSeconds\": 600,\n      \"Source\": \"http://l3.simfyafrica.com/data/0/0/c/3/00c3cd373ae3ec0a14b229c965d81565?nvb=20151129210306&nva=20151202070440&encoded=0dbf4adbc2ff2d9e6d42f\",\n      \"CoverImgUrl\": \"http://www.simfy.co.za/photos/tracks/14130640/320.jpg\",\n      \"MusicProviderTrackId\": \"14130640\",\n      \"MusicProviderId\": \"6fde5180-3a6f-4230-aea7-c607c726616f\",\n      \"GenreId\": \"f2092b8f-2ffe-49ce-bb27-97b677eb2c67\",\n      \"Genre\": {\n        \"Name\": \"Other\",\n        \"Id\": \"f2092b8f-2ffe-49ce-bb27-97b677eb2c67\"\n      }\n    };\n\n    this.playlistFreestyleTemplate = {\n      \"Id\": \"d4262d8e-eb68-437a-97c9-d0015a7abd1f\",\n      \"TemplateGroup\": {\n        \"Name\": \"Freestyle\",\n        \"Description\": \"Create your own.\",\n        \"IconFileName\": \"freestyle.svg\",\n        \"Type\": \"freestyle\",\n        \"Id\": \"36372f87-5986-4c57-8e33-460844620089\"\n      },\n      \"ClassLengthMinutes\": 45,\n      \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\",\n      \"Goals\": [{\n        \"GoalOptions\": [{\n          \"Name\": null,\n          \"Effort\": 50,\n          \"EffortHigh\": 60,\n          \"Position\": \"Seated\",\n          \"GoalId\": \"61038c2e-4ee9-44cb-9dac-b7371b501197\",\n          \"BeatId\": \"0cc08123-f231-47f1-8023-f8d78457e302\",\n          \"Beat\": {\n            \"Name\": \"On The Beat\",\n            \"Ratio\": 1,\n            \"Id\": \"0cc08123-f231-47f1-8023-f8d78457e302\"\n          },\n          \"Id\": \"91d13ce5-f3c5-4cee-87e3-fabb7906a4ea\"\n        }],\n        \"Id\": \"61038c2e-4ee9-44cb-9dac-b7371b501197\",\n        \"SortOrder\": 1,\n        \"Name\": \"Warm Up\",\n        \"BpmHigh\": 100,\n        \"BpmLow\": 90,\n        \"Aim\": null,\n        \"Interval\": false,\n        \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\"\n      }]\n    };\n\n    this.playlistTemplate = {\n      \"Id\": \"3d139eb7-5a3a-416b-8ab4-bf9d345eae8e\",\n      \"TemplateGroup\": {\n        \"Name\": \"All Terrain\",\n        \"Description\": \"Mix it up with a variety of track goals and a broad range of intensities.\",\n        \"IconFileName\": \"allterrain.svg\",\n        \"Id\": \"f30a2661-21f2-4455-8cd1-5a793eb8c438\"\n      },\n      \"ClassLengthMinutes\": 45,\n      \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\",\n      \"Goals\": [{\n        \"GoalOptions\": [{\n          \"Name\": null,\n          \"Effort\": 50,\n          \"EffortHigh\": 60,\n          \"Position\": \"Seated\",\n          \"GoalId\": \"61038c2e-4ee9-44cb-9dac-b7371b501197\",\n          \"BeatId\": \"0cc08123-f231-47f1-8023-f8d78457e302\",\n          \"Beat\": {\n            \"Name\": \"On The Beat\",\n            \"Ratio\": 1,\n            \"Id\": \"0cc08123-f231-47f1-8023-f8d78457e302\"\n          },\n          \"Id\": \"91d13ce5-f3c5-4cee-87e3-fabb7906a4ea\"\n        }],\n        \"Id\": \"61038c2e-4ee9-44cb-9dac-b7371b501197\",\n        \"SortOrder\": 1,\n        \"Name\": \"Warm Up\",\n        \"BpmHigh\": 100,\n        \"BpmLow\": 90,\n        \"Aim\": null,\n        \"Interval\": false,\n        \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\"\n      }, {\n        \"GoalOptions\": [{\n          \"Name\": null,\n          \"Effort\": 60,\n          \"EffortHigh\": 70,\n          \"Position\": \"Seated\",\n          \"GoalId\": \"442fc263-1972-437a-b1f3-fdbdd9740acf\",\n          \"BeatId\": \"0cc08123-f231-47f1-8023-f8d78457e302\",\n          \"Beat\": {\n            \"Name\": \"On The Beat\",\n            \"Ratio\": 1,\n            \"Id\": \"0cc08123-f231-47f1-8023-f8d78457e302\"\n          },\n          \"Id\": \"702da904-4ae1-46c8-9c20-3b12a0237c97\"\n        }],\n        \"Id\": \"442fc263-1972-437a-b1f3-fdbdd9740acf\",\n        \"SortOrder\": 2,\n        \"Name\": \"Seated Ride\",\n        \"BpmHigh\": 110,\n        \"BpmLow\": 90,\n        \"Aim\": null,\n        \"Interval\": false,\n        \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\"\n      }, {\n        \"GoalOptions\": [{\n          \"Name\": \"Sprint\",\n          \"Effort\": 70,\n          \"EffortHigh\": 80,\n          \"Position\": \"Seated\",\n          \"GoalId\": \"00e1a846-8e8e-472b-a9dd-a23410011f31\",\n          \"BeatId\": \"0cc08123-f231-47f1-8023-f8d78457e302\",\n          \"Beat\": {\n            \"Name\": \"On The Beat\",\n            \"Ratio\": 1,\n            \"Id\": \"0cc08123-f231-47f1-8023-f8d78457e302\"\n          },\n          \"Id\": \"a7148f42-d11e-4fbc-9963-83968ea42b0e\"\n        }, {\n          \"Name\": \"Recovery\",\n          \"Effort\": 60,\n          \"EffortHigh\": 0,\n          \"Position\": \"Seated\",\n          \"GoalId\": \"00e1a846-8e8e-472b-a9dd-a23410011f31\",\n          \"BeatId\": \"4e8885d1-4939-463c-bcda-adbdeede628d\",\n          \"Beat\": {\n            \"Name\": \"Half Time\",\n            \"Ratio\": 0.5,\n            \"Id\": \"4e8885d1-4939-463c-bcda-adbdeede628d\"\n          },\n          \"Id\": \"297c3502-7ad0-42b0-a0fd-0004d3040a4f\"\n        }],\n        \"Id\": \"00e1a846-8e8e-472b-a9dd-a23410011f31\",\n        \"SortOrder\": 3,\n        \"Name\": \"Seated Interval\",\n        \"BpmHigh\": 130,\n        \"BpmLow\": 110,\n        \"Aim\": null,\n        \"Interval\": false,\n        \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\"\n      }, {\n        \"GoalOptions\": [{\n          \"Name\": null,\n          \"Effort\": 80,\n          \"EffortHigh\": 90,\n          \"Position\": \"Standing\",\n          \"GoalId\": \"c011d9a2-aa8b-4e5b-a090-c4a89c347014\",\n          \"BeatId\": \"4e8885d1-4939-463c-bcda-adbdeede628d\",\n          \"Beat\": {\n            \"Name\": \"Half Time\",\n            \"Ratio\": 0.5,\n            \"Id\": \"4e8885d1-4939-463c-bcda-adbdeede628d\"\n          },\n          \"Id\": \"8099abb0-7608-4c53-a12a-eb992e1a9042\"\n        }],\n        \"Id\": \"c011d9a2-aa8b-4e5b-a090-c4a89c347014\",\n        \"SortOrder\": 4,\n        \"Name\": \"Standing Climb\",\n        \"BpmHigh\": 160,\n        \"BpmLow\": 120,\n        \"Aim\": null,\n        \"Interval\": false,\n        \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\"\n      }, {\n        \"GoalOptions\": [{\n          \"Name\": null,\n          \"Effort\": 70,\n          \"EffortHigh\": 80,\n          \"Position\": \"Seated\",\n          \"GoalId\": \"c887dae4-98ef-43a0-a64d-937ce60e26d3\",\n          \"BeatId\": \"0cc08123-f231-47f1-8023-f8d78457e302\",\n          \"Beat\": {\n            \"Name\": \"On The Beat\",\n            \"Ratio\": 1,\n            \"Id\": \"0cc08123-f231-47f1-8023-f8d78457e302\"\n          },\n          \"Id\": \"87db1a3e-2ea8-48ba-af27-c54e302746c0\"\n        }],\n        \"Id\": \"c887dae4-98ef-43a0-a64d-937ce60e26d3\",\n        \"SortOrder\": 5,\n        \"Name\": \"Seated Rolling Hills\",\n        \"BpmHigh\": 110,\n        \"BpmLow\": 90,\n        \"Aim\": null,\n        \"Interval\": false,\n        \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\"\n      }, {\n        \"GoalOptions\": [{\n          \"Name\": \"Sprint\",\n          \"Effort\": 60,\n          \"EffortHigh\": 0,\n          \"Position\": \"Seated\",\n          \"GoalId\": \"ccc20698-8253-491b-9783-5cda00935522\",\n          \"BeatId\": \"0cc08123-f231-47f1-8023-f8d78457e302\",\n          \"Beat\": {\n            \"Name\": \"On The Beat\",\n            \"Ratio\": 1,\n            \"Id\": \"0cc08123-f231-47f1-8023-f8d78457e302\"\n          },\n          \"Id\": \"b5e93e55-8a30-4bfd-ab28-ea7d412afc5f\"\n        }, {\n          \"Name\": \"Recovery\",\n          \"Effort\": 60,\n          \"EffortHigh\": 0,\n          \"Position\": \"Seated\",\n          \"GoalId\": \"ccc20698-8253-491b-9783-5cda00935522\",\n          \"BeatId\": \"4e8885d1-4939-463c-bcda-adbdeede628d\",\n          \"Beat\": {\n            \"Name\": \"Half Time\",\n            \"Ratio\": 0.5,\n            \"Id\": \"4e8885d1-4939-463c-bcda-adbdeede628d\"\n          },\n          \"Id\": \"651fb47d-b27a-42cd-a17c-d383a23c7169\"\n        }],\n        \"Id\": \"ccc20698-8253-491b-9783-5cda00935522\",\n        \"SortOrder\": 6,\n        \"Name\": \"Active Recovery\",\n        \"BpmHigh\": 180,\n        \"BpmLow\": 160,\n        \"Aim\": null,\n        \"Interval\": false,\n        \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\"\n      }, {\n        \"GoalOptions\": [{\n          \"Name\": \"Sprint\",\n          \"Effort\": 70,\n          \"EffortHigh\": 80,\n          \"Position\": \"Seated\",\n          \"GoalId\": \"00e1a846-8e8e-472b-a9dd-a23410011f31\",\n          \"BeatId\": \"0cc08123-f231-47f1-8023-f8d78457e302\",\n          \"Beat\": {\n            \"Name\": \"On The Beat\",\n            \"Ratio\": 1,\n            \"Id\": \"0cc08123-f231-47f1-8023-f8d78457e302\"\n          },\n          \"Id\": \"a7148f42-d11e-4fbc-9963-83968ea42b0e\"\n        }, {\n          \"Name\": \"Recovery\",\n          \"Effort\": 60,\n          \"EffortHigh\": 0,\n          \"Position\": \"Seated\",\n          \"GoalId\": \"00e1a846-8e8e-472b-a9dd-a23410011f31\",\n          \"BeatId\": \"4e8885d1-4939-463c-bcda-adbdeede628d\",\n          \"Beat\": {\n            \"Name\": \"Half Time\",\n            \"Ratio\": 0.5,\n            \"Id\": \"4e8885d1-4939-463c-bcda-adbdeede628d\"\n          },\n          \"Id\": \"297c3502-7ad0-42b0-a0fd-0004d3040a4f\"\n        }],\n        \"Id\": \"00e1a846-8e8e-472b-a9dd-a23410011f31\",\n        \"SortOrder\": 7,\n        \"Name\": \"Seated Interval\",\n        \"BpmHigh\": 130,\n        \"BpmLow\": 110,\n        \"Aim\": null,\n        \"Interval\": false,\n        \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\"\n      }, {\n        \"GoalOptions\": [{\n          \"Name\": null,\n          \"Effort\": 80,\n          \"EffortHigh\": 90,\n          \"Position\": \"Seated\",\n          \"GoalId\": \"c1d42fa8-a27f-4129-a1da-e0930efb2cec\",\n          \"BeatId\": \"0cc08123-f231-47f1-8023-f8d78457e302\",\n          \"Beat\": {\n            \"Name\": \"On The Beat\",\n            \"Ratio\": 1,\n            \"Id\": \"0cc08123-f231-47f1-8023-f8d78457e302\"\n          },\n          \"Id\": \"07df87dc-e90d-429b-9eae-0201414d3e3c\"\n        }],\n        \"Id\": \"c1d42fa8-a27f-4129-a1da-e0930efb2cec\",\n        \"SortOrder\": 8,\n        \"Name\": \"Standing Rolling Hills\",\n        \"BpmHigh\": 100,\n        \"BpmLow\": 80,\n        \"Aim\": null,\n        \"Interval\": false,\n        \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\"\n      }, {\n        \"GoalOptions\": [{\n          \"Name\": \"Sprint\",\n          \"Effort\": 90,\n          \"EffortHigh\": 0,\n          \"Position\": \"Seated\",\n          \"GoalId\": \"3a796d73-4406-409d-893f-6ed04e2dead9\",\n          \"BeatId\": \"0cc08123-f231-47f1-8023-f8d78457e302\",\n          \"Beat\": {\n            \"Name\": \"On The Beat\",\n            \"Ratio\": 1,\n            \"Id\": \"0cc08123-f231-47f1-8023-f8d78457e302\"\n          },\n          \"Id\": \"6ae5546e-b967-496e-8451-764c40e635a9\"\n        }, {\n          \"Name\": \"Recovery\",\n          \"Effort\": 60,\n          \"EffortHigh\": 0,\n          \"Position\": \"Standing\",\n          \"GoalId\": \"3a796d73-4406-409d-893f-6ed04e2dead9\",\n          \"BeatId\": \"4e8885d1-4939-463c-bcda-adbdeede628d\",\n          \"Beat\": {\n            \"Name\": \"Half Time\",\n            \"Ratio\": 0.5,\n            \"Id\": \"4e8885d1-4939-463c-bcda-adbdeede628d\"\n          },\n          \"Id\": \"cb46f85d-96da-4b1c-bb56-1ba9b955d875\"\n        }],\n        \"Id\": \"3a796d73-4406-409d-893f-6ed04e2dead9\",\n        \"SortOrder\": 9,\n        \"Name\": \"Alt Seated & Standing Climb\",\n        \"BpmHigh\": 160,\n        \"BpmLow\": 120,\n        \"Aim\": null,\n        \"Interval\": false,\n        \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\"\n      }, {\n        \"GoalOptions\": [{\n          \"Name\": null,\n          \"Effort\": 90,\n          \"EffortHigh\": 100,\n          \"Position\": \"Seated\",\n          \"GoalId\": \"1a63b68c-2f9b-48eb-9ded-883d71d670e7\",\n          \"BeatId\": \"0cc08123-f231-47f1-8023-f8d78457e302\",\n          \"Beat\": {\n            \"Name\": \"On The Beat\",\n            \"Ratio\": 1,\n            \"Id\": \"0cc08123-f231-47f1-8023-f8d78457e302\"\n          },\n          \"Id\": \"cc6dde04-d7d1-449c-a96b-fb06c4157ea2\"\n        }],\n        \"Id\": \"1a63b68c-2f9b-48eb-9ded-883d71d670e7\",\n        \"SortOrder\": 10,\n        \"Name\": \"The Finish Line Sprint\",\n        \"BpmHigh\": 200,\n        \"BpmLow\": 130,\n        \"Aim\": null,\n        \"Interval\": false,\n        \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\"\n      }, {\n        \"GoalOptions\": [{\n          \"Name\": null,\n          \"Effort\": 50,\n          \"EffortHigh\": 60,\n          \"Position\": \"Seated\",\n          \"GoalId\": \"8dec4aa5-b994-438d-b64f-17c96d53dfe4\",\n          \"BeatId\": \"0cc08123-f231-47f1-8023-f8d78457e302\",\n          \"Beat\": {\n            \"Name\": \"On The Beat\",\n            \"Ratio\": 1,\n            \"Id\": \"0cc08123-f231-47f1-8023-f8d78457e302\"\n          },\n          \"Id\": \"f9afe5cd-128f-4950-ba9f-691cf6c5be0f\"\n        }],\n        \"Id\": \"8dec4aa5-b994-438d-b64f-17c96d53dfe4\",\n        \"SortOrder\": 11,\n        \"Name\": \"Cool Down\",\n        \"BpmHigh\": 90,\n        \"BpmLow\": 80,\n        \"Aim\": null,\n        \"Interval\": false,\n        \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\"\n      }]\n    };\n\n    this.playlist = {\n      \"Name\": \"calvin harris 2\",\n      \"Shared\": false,\n      \"IsSyncedToGyms\": true,\n      \"SharedFromPlayListId\": null,\n      \"UserId\": \"d1510e26-d628-459c-9f50-379662f61d05\",\n      \"User\": null,\n      \"TemplateName\": \"All Terrain\",\n      \"TemplateIconFileName\": \"allterrain.svg\",\n      \"TemplateId\": \"3d139eb7-5a3a-416b-8ab4-bf9d345eae8e\",\n      \"LastUpdated\": \"2015-11-27T09:42:18.203\",\n      \"CreateDate\": \"2015-10-28T12:21:37.257\",\n      \"ClassLengthMinutes\": 45,\n      \"MusicProviderPlaylistId\": \"18061059\",\n      \"MusicProviderPlaylistSaved\": false,\n      \"Complete\": true,\n      \"PlaylistGoals\": [{\n        \"SortOrder\": 1,\n        \"PlaylistId\": \"0e16d4ba-1557-46d0-891c-05ac87ecf90a\",\n        \"GoalId\": \"4733c545-81e3-4138-b91a-47a096c9d7dc\",\n        \"Goal\": {\n          \"Name\": \"Warm Up\",\n          \"BpmHigh\": 90,\n          \"BpmLow\": 80,\n          \"Aim\": \"We want you to ride at 80 - 90 rpm for the duration of the song\",\n          \"Interval\": false,\n          \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\",\n          \"Country\": null,\n          \"GoalChallenge\": null,\n          \"GoalChallengeId\": null,\n          \"GoalOptions\": [{\n            \"Name\": \"On the beat\",\n            \"Effort\": 90,\n            \"EffortHigh\": 0,\n            \"Position\": \"Standing\",\n            \"GoalId\": \"4733c545-81e3-4138-b91a-47a096c9d7dc\",\n            \"BeatId\": \"0cc08123-f231-47f1-8023-f8d78457e302\",\n            \"Beat\": {\n              \"Name\": \"On The Beat\",\n              \"Ratio\": 1,\n              \"Id\": \"0cc08123-f231-47f1-8023-f8d78457e302\"\n            },\n            \"Id\": \"2e832bde-1317-4f49-951a-6bae1242ca76\"\n          }],\n          \"Id\": \"4733c545-81e3-4138-b91a-47a096c9d7dc\"\n        },\n        \"PlaylistGoalNotes\": [{\n          \"TrackTimeSeconds\": null,\n          \"NoteText\": \"I'd like to add some notes, please!\",\n          \"TrackId\": \"00ae4a3b-52ce-4c29-88e9-29ed070f4c27\",\n          \"SortOrder\": 1,\n          \"Id\": \"5c5baf44-b4c7-477b-853f-d646920610c5\"\n        }],\n        \"PlaylistGoalTracks\": [{\n          \"TrackId\": \"0f60c832-43cc-4c7d-9105-1f9e593b4faa\",\n          \"Track\": {\n            \"Name\": \"Lean On (feat. MØ & DJ Snake)\",\n            \"Album\": \"Peace Is The Mission\",\n            \"Artist\": \"Major Lazer\",\n            \"Bpm\": 177,\n            \"DurationSeconds\": 176,\n            \"CoverImgUrl\": \"http://www.simfy.co.za/photos/tracks/51340018/320.jpg\",\n            \"MusicProviderTrackId\": \"51340018\",\n            \"MusicProviderId\": \"6fde5180-3a6f-4230-aea7-c607c726616f\",\n            \"MusicProvider\": null,\n            \"GenreId\": \"f2092b8f-2ffe-49ce-bb27-97b677eb2c67\",\n            \"Genre\": {\n              \"Name\": \"Other\",\n              \"Id\": \"f2092b8f-2ffe-49ce-bb27-97b677eb2c67\"\n            },\n            \"Id\": \"0f60c832-43cc-4c7d-9105-1f9e593b4faa\"\n          },\n          \"SortOrder\": 0,\n          \"Id\": \"49e122a4-4856-4ece-b95d-0e1cd5715938\"\n        }],\n        \"Id\": \"7d811b32-5e1f-44ed-99b8-247f58720098\"\n      }, {\n        \"SortOrder\": 2,\n        \"PlaylistId\": \"0e16d4ba-1557-46d0-891c-05ac87ecf90a\",\n        \"GoalId\": \"21c37c85-b8b5-4e54-8750-8ea48d412104\",\n        \"Goal\": {\n          \"Name\": \"Seated Ride\",\n          \"BpmHigh\": 120,\n          \"BpmLow\": 100,\n          \"Aim\": \"We want you to ride at 100 - 120 rpm for the duration of the song\",\n          \"Interval\": false,\n          \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\",\n          \"Country\": null,\n          \"GoalChallenge\": null,\n          \"GoalChallengeId\": null,\n          \"GoalOptions\": [{\n            \"Name\": \"Seated Sprint\",\n            \"Effort\": 70,\n            \"EffortHigh\": 0,\n            \"Position\": \"Seated\",\n            \"GoalId\": \"21c37c85-b8b5-4e54-8750-8ea48d412104\",\n            \"BeatId\": \"0cc08123-f231-47f1-8023-f8d78457e302\",\n            \"Beat\": {\n              \"Name\": \"On The Beat\",\n              \"Ratio\": 1,\n              \"Id\": \"0cc08123-f231-47f1-8023-f8d78457e302\"\n            },\n            \"Id\": \"dd297d55-8b05-4988-8091-4fb642b9afd7\"\n          }],\n          \"Id\": \"21c37c85-b8b5-4e54-8750-8ea48d412104\"\n        },\n        \"PlaylistGoalNotes\": [],\n        \"PlaylistGoalTracks\": [{\n          \"TrackId\": \"d842cbb2-c834-49c5-b545-f68c8ff8b69c\",\n          \"Track\": {\n            \"Name\": \"Não Tô Entendendo\",\n            \"Album\": \"Ronaldo Foi Pra Guerra\",\n            \"Artist\": \"Lobão E Os Ronaldos\",\n            \"Bpm\": 103,\n            \"DurationSeconds\": 152,\n            \"CoverImgUrl\": \"http://www.simfy.co.za/photos/tracks/28093011/320.jpg\",\n            \"MusicProviderTrackId\": \"28093011\",\n            \"MusicProviderId\": \"6fde5180-3a6f-4230-aea7-c607c726616f\",\n            \"MusicProvider\": null,\n            \"GenreId\": \"31db3a05-30c7-4058-94a6-504046d4b178\",\n            \"Genre\": {\n              \"Name\": \"Pop\",\n              \"Id\": \"31db3a05-30c7-4058-94a6-504046d4b178\"\n            },\n            \"Id\": \"d842cbb2-c834-49c5-b545-f68c8ff8b69c\"\n          },\n          \"SortOrder\": 0,\n          \"Id\": \"9e301d6e-3a2c-4f69-98f0-bece19b4f1cf\"\n        }],\n        \"Id\": \"ac4e1472-1b65-49fa-ba2b-53eafa8937a4\"\n      }, {\n        \"SortOrder\": 3,\n        \"PlaylistId\": \"0e16d4ba-1557-46d0-891c-05ac87ecf90a\",\n        \"GoalId\": \"aef40c68-b087-45b2-be0b-119f6b686329\",\n        \"Goal\": {\n          \"Name\": \"Seated Intervals\",\n          \"BpmHigh\": 140,\n          \"BpmLow\": 120,\n          \"Aim\": \"We want you to alternate sprinting at 120 - 140 rpm and recovering at 60 - 80 rpm for the duration of the song\",\n          \"Interval\": false,\n          \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\",\n          \"Country\": null,\n          \"GoalChallenge\": null,\n          \"GoalChallengeId\": null,\n          \"GoalOptions\": [{\n            \"Name\": \"Seated Sprint\",\n            \"Effort\": 80,\n            \"EffortHigh\": 0,\n            \"Position\": \"Seated\",\n            \"GoalId\": \"aef40c68-b087-45b2-be0b-119f6b686329\",\n            \"BeatId\": \"0cc08123-f231-47f1-8023-f8d78457e302\",\n            \"Beat\": {\n              \"Name\": \"On The Beat\",\n              \"Ratio\": 1,\n              \"Id\": \"0cc08123-f231-47f1-8023-f8d78457e302\"\n            },\n            \"Id\": \"6e63ccfe-ebb9-4e4d-b0ce-6ac74b48a7ca\"\n          }, {\n            \"Name\": \"Seated\",\n            \"Effort\": 50,\n            \"EffortHigh\": 0,\n            \"Position\": \"Seated\",\n            \"GoalId\": \"aef40c68-b087-45b2-be0b-119f6b686329\",\n            \"BeatId\": \"4e8885d1-4939-463c-bcda-adbdeede628d\",\n            \"Beat\": {\n              \"Name\": \"Half Time\",\n              \"Ratio\": 0.5,\n              \"Id\": \"4e8885d1-4939-463c-bcda-adbdeede628d\"\n            },\n            \"Id\": \"6182c77c-480e-4007-86cd-9a63155c6ed4\"\n          }],\n          \"Id\": \"aef40c68-b087-45b2-be0b-119f6b686329\"\n        },\n        \"PlaylistGoalNotes\": [{\n          \"TrackTimeSeconds\": null,\n          \"NoteText\": \"Aim: Alternate between sprinting on the beat and recovering on the half beat for the duration of the song.\",\n          \"TrackId\": \"47a79159-6ae9-46c1-92ea-e28f0dcae417\",\n          \"SortOrder\": 1,\n          \"Id\": \"67b70591-658a-4e4a-9397-c83e0aeb6641\"\n        }],\n        \"PlaylistGoalTracks\": [{\n          \"TrackId\": \"47a79159-6ae9-46c1-92ea-e28f0dcae417\",\n          \"Track\": {\n            \"Name\": \"Le Legionnaire\",\n            \"Album\": \"Bzn Live - 20 Jaar\",\n            \"Artist\": \"BZN\",\n            \"Bpm\": 123,\n            \"DurationSeconds\": 288,\n            \"CoverImgUrl\": \"http://www.simfy.co.za/photos/tracks/12761579/320.jpg\",\n            \"MusicProviderTrackId\": \"53636415\",\n            \"MusicProviderId\": \"6fde5180-3a6f-4230-aea7-c607c726616f\",\n            \"MusicProvider\": null,\n            \"GenreId\": \"31db3a05-30c7-4058-94a6-504046d4b178\",\n            \"Genre\": {\n              \"Name\": \"Pop\",\n              \"Id\": \"31db3a05-30c7-4058-94a6-504046d4b178\"\n            },\n            \"Id\": \"47a79159-6ae9-46c1-92ea-e28f0dcae417\"\n          },\n          \"SortOrder\": 0,\n          \"Id\": \"0807fd5c-baee-4d73-89b3-d41f410ae78a\"\n        }],\n        \"Id\": \"b6edab4d-4ff7-415f-8a4d-ba07759d588c\"\n      }, {\n        \"SortOrder\": 4,\n        \"PlaylistId\": \"0e16d4ba-1557-46d0-891c-05ac87ecf90a\",\n        \"GoalId\": \"b0b675be-684e-45f8-a275-03844f713674\",\n        \"Goal\": {\n          \"Name\": \"Seated Climb\",\n          \"BpmHigh\": 130,\n          \"BpmLow\": 100,\n          \"Aim\": \"We want you to ride at 50 - 65 rpm for the duration of the song\",\n          \"Interval\": false,\n          \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\",\n          \"Country\": null,\n          \"GoalChallenge\": null,\n          \"GoalChallengeId\": null,\n          \"GoalOptions\": [{\n            \"Name\": \"Half time\",\n            \"Effort\": 80,\n            \"EffortHigh\": 0,\n            \"Position\": \"Seated\",\n            \"GoalId\": \"b0b675be-684e-45f8-a275-03844f713674\",\n            \"BeatId\": \"4e8885d1-4939-463c-bcda-adbdeede628d\",\n            \"Beat\": {\n              \"Name\": \"Half Time\",\n              \"Ratio\": 0.5,\n              \"Id\": \"4e8885d1-4939-463c-bcda-adbdeede628d\"\n            },\n            \"Id\": \"1223f8d4-2391-47b7-9c83-93fa7eba5e2d\"\n          }],\n          \"Id\": \"b0b675be-684e-45f8-a275-03844f713674\"\n        },\n        \"PlaylistGoalNotes\": [{\n          \"TrackTimeSeconds\": 14,\n          \"NoteText\": \"Hit them hard now!\",\n          \"TrackId\": \"21761241-4dd4-45d3-8b5d-898b0ae867e0\",\n          \"SortOrder\": 1,\n          \"Id\": \"16ec1aa1-081e-443a-8cfa-2a62cd128029\"\n        }],\n        \"PlaylistGoalTracks\": [{\n          \"TrackId\": \"0e2c6ea8-bb06-4e0f-a702-e1532b2410f0\",\n          \"Track\": {\n            \"Name\": \"Devil In Me\",\n            \"Album\": \"22-20s\",\n            \"Artist\": \"22-20s\",\n            \"Bpm\": 103,\n            \"DurationSeconds\": 259,\n            \"CoverImgUrl\": \"http://www.simfy.co.za/photos/tracks/14585397/320.jpg\",\n            \"MusicProviderTrackId\": \"14585397\",\n            \"MusicProviderId\": \"6fde5180-3a6f-4230-aea7-c607c726616f\",\n            \"MusicProvider\": null,\n            \"GenreId\": \"f2092b8f-2ffe-49ce-bb27-97b677eb2c67\",\n            \"Genre\": {\n              \"Name\": \"Other\",\n              \"Id\": \"f2092b8f-2ffe-49ce-bb27-97b677eb2c67\"\n            },\n            \"Id\": \"0e2c6ea8-bb06-4e0f-a702-e1532b2410f0\"\n          },\n          \"SortOrder\": 0,\n          \"Id\": \"57e24191-f480-453d-ad84-0b97130fbfae\"\n        }],\n        \"Id\": \"b5999600-a1d7-4b40-9530-d60f948b1871\"\n      }, {\n        \"SortOrder\": 5,\n        \"PlaylistId\": \"0e16d4ba-1557-46d0-891c-05ac87ecf90a\",\n        \"GoalId\": \"cb06d8b8-d1d7-4dec-96c3-9a552e7ea7c1\",\n        \"Goal\": {\n          \"Name\": \"Standing Climb\",\n          \"BpmHigh\": 130,\n          \"BpmLow\": 100,\n          \"Aim\": \"We want you to ride at 50 - 65 rpm for the duration of the song\",\n          \"Interval\": false,\n          \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\",\n          \"Country\": null,\n          \"GoalChallenge\": null,\n          \"GoalChallengeId\": null,\n          \"GoalOptions\": [{\n            \"Name\": \"Half time\",\n            \"Effort\": 90,\n            \"EffortHigh\": 0,\n            \"Position\": \"Standing\",\n            \"GoalId\": \"cb06d8b8-d1d7-4dec-96c3-9a552e7ea7c1\",\n            \"BeatId\": \"0cc08123-f231-47f1-8023-f8d78457e302\",\n            \"Beat\": {\n              \"Name\": \"On The Beat\",\n              \"Ratio\": 1,\n              \"Id\": \"0cc08123-f231-47f1-8023-f8d78457e302\"\n            },\n            \"Id\": \"55cd31d7-5ef6-4a2f-b5ca-c9bd45d2c8a4\"\n          }],\n          \"Id\": \"cb06d8b8-d1d7-4dec-96c3-9a552e7ea7c1\"\n        },\n        \"PlaylistGoalNotes\": [{\n          \"TrackTimeSeconds\": 55,\n          \"NoteText\": \"Hmmm what should I eat tonight\",\n          \"TrackId\": \"69cb3bbf-757d-434f-b734-eed62f66ba68\",\n          \"SortOrder\": 1,\n          \"Id\": \"6dc84a27-0edd-4b23-9846-35cef14e75b2\"\n        }],\n        \"PlaylistGoalTracks\": [{\n          \"TrackId\": \"bbaf11fb-89d5-4991-b8c8-0eedd0d063eb\",\n          \"Track\": {\n            \"Name\": \"My Name Is Jonas\",\n            \"Album\": \"Weezer\",\n            \"Artist\": \"Weezer\",\n            \"Bpm\": 118,\n            \"DurationSeconds\": 204,\n            \"CoverImgUrl\": \"http://www.simfy.co.za/photos/tracks/288351/320.jpg\",\n            \"MusicProviderTrackId\": \"288351\",\n            \"MusicProviderId\": \"6fde5180-3a6f-4230-aea7-c607c726616f\",\n            \"MusicProvider\": null,\n            \"GenreId\": \"31db3a05-30c7-4058-94a6-504046d4b178\",\n            \"Genre\": {\n              \"Name\": \"Pop\",\n              \"Id\": \"31db3a05-30c7-4058-94a6-504046d4b178\"\n            },\n            \"Id\": \"bbaf11fb-89d5-4991-b8c8-0eedd0d063eb\"\n          },\n          \"SortOrder\": 0,\n          \"Id\": \"b7502f19-582c-4a6c-91c4-4af077362d1e\"\n        }],\n        \"Id\": \"92bf8e0f-0143-4c1c-82e2-d1a739e27705\"\n      }, {\n        \"SortOrder\": 6,\n        \"PlaylistId\": \"0e16d4ba-1557-46d0-891c-05ac87ecf90a\",\n        \"GoalId\": \"faa2dc8e-676c-41e7-9ff1-7e991b72bcc2\",\n        \"Goal\": {\n          \"Name\": \"Recovery\",\n          \"BpmHigh\": 150,\n          \"BpmLow\": 120,\n          \"Aim\": \"We want you to ride at 60 - 75 rpm for the duration of the song\",\n          \"Interval\": false,\n          \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\",\n          \"Country\": null,\n          \"GoalChallenge\": null,\n          \"GoalChallengeId\": null,\n          \"GoalOptions\": [{\n            \"Name\": \"Half time\",\n            \"Effort\": 60,\n            \"EffortHigh\": 0,\n            \"Position\": \"Seated\",\n            \"GoalId\": \"faa2dc8e-676c-41e7-9ff1-7e991b72bcc2\",\n            \"BeatId\": \"4e8885d1-4939-463c-bcda-adbdeede628d\",\n            \"Beat\": {\n              \"Name\": \"Half Time\",\n              \"Ratio\": 0.5,\n              \"Id\": \"4e8885d1-4939-463c-bcda-adbdeede628d\"\n            },\n            \"Id\": \"00a8228a-9e49-4cd8-8f0d-1718905c1524\"\n          }],\n          \"Id\": \"faa2dc8e-676c-41e7-9ff1-7e991b72bcc2\"\n        },\n        \"PlaylistGoalNotes\": [],\n        \"PlaylistGoalTracks\": [{\n          \"TrackId\": \"83ef494c-f721-4400-923c-56f45e28ce22\",\n          \"Track\": {\n            \"Name\": \"Madagascar\",\n            \"Album\": \"Chinese Democracy\",\n            \"Artist\": \"Guns N' Roses\",\n            \"Bpm\": 128,\n            \"DurationSeconds\": 338,\n            \"CoverImgUrl\": \"http://www.simfy.co.za/photos/tracks/572075/320.jpg\",\n            \"MusicProviderTrackId\": \"572075\",\n            \"MusicProviderId\": \"6fde5180-3a6f-4230-aea7-c607c726616f\",\n            \"MusicProvider\": null,\n            \"GenreId\": \"34ab966c-7c95-4dc3-ac71-be3153ee8a98\",\n            \"Genre\": {\n              \"Name\": \"Rock\",\n              \"Id\": \"34ab966c-7c95-4dc3-ac71-be3153ee8a98\"\n            },\n            \"Id\": \"83ef494c-f721-4400-923c-56f45e28ce22\"\n          },\n          \"SortOrder\": 0,\n          \"Id\": \"66af16c6-704c-4a3c-a4ea-ff08581380cb\"\n        }],\n        \"Id\": \"2e832bde-1317-4f49-951a-6bae1242ca76\"\n      }, {\n        \"SortOrder\": 7,\n        \"PlaylistId\": \"0e16d4ba-1557-46d0-891c-05ac87ecf90a\",\n        \"GoalId\": \"4278403d-3652-4085-b491-ba3a9ced4f17\",\n        \"Goal\": {\n          \"Name\": \"Seated Climb 2\",\n          \"BpmHigh\": 130,\n          \"BpmLow\": 100,\n          \"Aim\": \"We want you to ride at 50 - 65 rpm for the duration of the song\",\n          \"Interval\": false,\n          \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\",\n          \"Country\": null,\n          \"GoalChallenge\": null,\n          \"GoalChallengeId\": null,\n          \"GoalOptions\": [{\n            \"Name\": \"Half time\",\n            \"Effort\": 80,\n            \"EffortHigh\": 0,\n            \"Position\": \"Seated\",\n            \"GoalId\": \"4278403d-3652-4085-b491-ba3a9ced4f17\",\n            \"BeatId\": \"4e8885d1-4939-463c-bcda-adbdeede628d\",\n            \"Beat\": {\n              \"Name\": \"Half Time\",\n              \"Ratio\": 0.5,\n              \"Id\": \"4e8885d1-4939-463c-bcda-adbdeede628d\"\n            },\n            \"Id\": \"dc0b56b7-5595-4222-8a4d-b6dd81ffab5b\"\n          }],\n          \"Id\": \"4278403d-3652-4085-b491-ba3a9ced4f17\"\n        },\n        \"PlaylistGoalNotes\": [],\n        \"PlaylistGoalTracks\": [{\n          \"TrackId\": \"cac52c3f-5be1-4618-8e00-85b224a91f39\",\n          \"Track\": {\n            \"Name\": \"Daniel Na Cova Dos Leões\",\n            \"Album\": \"Letra & Música: Canções de Renato Russo\",\n            \"Artist\": \"Célia Porto\",\n            \"Bpm\": 108,\n            \"DurationSeconds\": 147,\n            \"CoverImgUrl\": \"http://www.simfy.co.za/photos/tracks/48342403/320.jpg\",\n            \"MusicProviderTrackId\": \"48342403\",\n            \"MusicProviderId\": \"6fde5180-3a6f-4230-aea7-c607c726616f\",\n            \"MusicProvider\": null,\n            \"GenreId\": \"f2092b8f-2ffe-49ce-bb27-97b677eb2c67\",\n            \"Genre\": {\n              \"Name\": \"Other\",\n              \"Id\": \"f2092b8f-2ffe-49ce-bb27-97b677eb2c67\"\n            },\n            \"Id\": \"cac52c3f-5be1-4618-8e00-85b224a91f39\"\n          },\n          \"SortOrder\": 0,\n          \"Id\": \"68268934-5300-414e-bf8f-462f812a6ef1\"\n        }],\n        \"Id\": \"1bcd3397-08e1-4668-900e-82a3a8d54b92\"\n      }, {\n        \"SortOrder\": 8,\n        \"PlaylistId\": \"0e16d4ba-1557-46d0-891c-05ac87ecf90a\",\n        \"GoalId\": \"c24f3530-38ee-4ec1-b486-cd5ef8d59b92\",\n        \"Goal\": {\n          \"Name\": \"Standing Climb 2\",\n          \"BpmHigh\": 130,\n          \"BpmLow\": 100,\n          \"Aim\": \"We want you to ride at 50 - 65 rpm for the duration of the song\",\n          \"Interval\": false,\n          \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\",\n          \"Country\": null,\n          \"GoalChallenge\": null,\n          \"GoalChallengeId\": null,\n          \"GoalOptions\": [{\n            \"Name\": \"Half time\",\n            \"Effort\": 90,\n            \"EffortHigh\": 0,\n            \"Position\": \"Standing\",\n            \"GoalId\": \"c24f3530-38ee-4ec1-b486-cd5ef8d59b92\",\n            \"BeatId\": \"4e8885d1-4939-463c-bcda-adbdeede628d\",\n            \"Beat\": {\n              \"Name\": \"Half Time\",\n              \"Ratio\": 0.5,\n              \"Id\": \"4e8885d1-4939-463c-bcda-adbdeede628d\"\n            },\n            \"Id\": \"b24d83b0-8360-49a7-9807-18ecd1637e07\"\n          }],\n          \"Id\": \"c24f3530-38ee-4ec1-b486-cd5ef8d59b92\"\n        },\n        \"PlaylistGoalNotes\": [],\n        \"PlaylistGoalTracks\": [{\n          \"TrackId\": \"2d4a6b86-7671-459d-9922-34da6059928f\",\n          \"Track\": {\n            \"Name\": \"Still Remains\",\n            \"Album\": \"AB III\",\n            \"Artist\": \"Alter Bridge\",\n            \"Bpm\": 105,\n            \"DurationSeconds\": 284,\n            \"CoverImgUrl\": \"http://www.simfy.co.za/photos/tracks/23069128/320.jpg\",\n            \"MusicProviderTrackId\": \"23069128\",\n            \"MusicProviderId\": \"6fde5180-3a6f-4230-aea7-c607c726616f\",\n            \"MusicProvider\": null,\n            \"GenreId\": \"34ab966c-7c95-4dc3-ac71-be3153ee8a98\",\n            \"Genre\": {\n              \"Name\": \"Rock\",\n              \"Id\": \"34ab966c-7c95-4dc3-ac71-be3153ee8a98\"\n            },\n            \"Id\": \"2d4a6b86-7671-459d-9922-34da6059928f\"\n          },\n          \"SortOrder\": 0,\n          \"Id\": \"16ebc972-8081-4496-9fec-82dced8c20e5\"\n        }],\n        \"Id\": \"4c38ef69-5aeb-4b3d-a056-effa469dd144\"\n      }, {\n        \"SortOrder\": 9,\n        \"PlaylistId\": \"0e16d4ba-1557-46d0-891c-05ac87ecf90a\",\n        \"GoalId\": \"2dc1ee7f-fcb9-4b49-bfb0-5986204b989d\",\n        \"Goal\": {\n          \"Name\": \"Seated Intervals 2\",\n          \"BpmHigh\": 140,\n          \"BpmLow\": 120,\n          \"Aim\": \"We want you to alternate sprinting at 120 - 140 rpm and recovering at 60 - 80 rpm for the duration of the song\",\n          \"Interval\": false,\n          \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\",\n          \"Country\": null,\n          \"GoalChallenge\": null,\n          \"GoalChallengeId\": null,\n          \"GoalOptions\": [{\n            \"Name\": \"Recover Half Time\",\n            \"Effort\": 50,\n            \"EffortHigh\": 0,\n            \"Position\": \"Seated\",\n            \"GoalId\": \"2dc1ee7f-fcb9-4b49-bfb0-5986204b989d\",\n            \"BeatId\": \"4e8885d1-4939-463c-bcda-adbdeede628d\",\n            \"Beat\": {\n              \"Name\": \"Half Time\",\n              \"Ratio\": 0.5,\n              \"Id\": \"4e8885d1-4939-463c-bcda-adbdeede628d\"\n            },\n            \"Id\": \"aecaf685-85ca-4f74-bec8-a3eff2883248\"\n          }, {\n            \"Name\": \"Sprint on the beat\",\n            \"Effort\": 80,\n            \"EffortHigh\": 90,\n            \"Position\": \"Seated\",\n            \"GoalId\": \"2dc1ee7f-fcb9-4b49-bfb0-5986204b989d\",\n            \"BeatId\": \"0cc08123-f231-47f1-8023-f8d78457e302\",\n            \"Beat\": {\n              \"Name\": \"On The Beat\",\n              \"Ratio\": 1,\n              \"Id\": \"0cc08123-f231-47f1-8023-f8d78457e302\"\n            },\n            \"Id\": \"ba9c551e-9f7c-4b7d-ae09-b6d694e23c21\"\n          }],\n          \"Id\": \"2dc1ee7f-fcb9-4b49-bfb0-5986204b989d\"\n        },\n        \"PlaylistGoalNotes\": [],\n        \"PlaylistGoalTracks\": [{\n          \"TrackId\": \"2a7791b2-559c-42d2-8775-7470581bd318\",\n          \"Track\": {\n            \"Name\": \"Forgotten Man\",\n            \"Album\": \"Hypnotic Eye\",\n            \"Artist\": \"Tom Petty & The Heartbreakers\",\n            \"Bpm\": 130,\n            \"DurationSeconds\": 168,\n            \"CoverImgUrl\": \"http://www.simfy.co.za/photos/tracks/43933655/320.jpg\",\n            \"MusicProviderTrackId\": \"43933655\",\n            \"MusicProviderId\": \"6fde5180-3a6f-4230-aea7-c607c726616f\",\n            \"MusicProvider\": null,\n            \"GenreId\": \"34ab966c-7c95-4dc3-ac71-be3153ee8a98\",\n            \"Genre\": {\n              \"Name\": \"Rock\",\n              \"Id\": \"34ab966c-7c95-4dc3-ac71-be3153ee8a98\"\n            },\n            \"Id\": \"2a7791b2-559c-42d2-8775-7470581bd318\"\n          },\n          \"SortOrder\": 0,\n          \"Id\": \"96da0cff-9c04-4d48-9b89-1daa51e78ab8\"\n        }],\n        \"Id\": \"fe552888-26cd-47ab-869b-76e547694d36\"\n      }, {\n        \"SortOrder\": 10,\n        \"PlaylistId\": \"0e16d4ba-1557-46d0-891c-05ac87ecf90a\",\n        \"GoalId\": \"6c9af002-d0e2-477c-91ec-50d71fffba50\",\n        \"Goal\": {\n          \"Name\": \"The Finish Line\",\n          \"BpmHigh\": 130,\n          \"BpmLow\": 90,\n          \"Aim\": \"We want you to ride at 90 - 130 rpm for the duration of the song\",\n          \"Interval\": false,\n          \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\",\n          \"Country\": null,\n          \"GoalChallenge\": null,\n          \"GoalChallengeId\": null,\n          \"GoalOptions\": [{\n            \"Name\": \"Sprint on the beat\",\n            \"Effort\": 90,\n            \"EffortHigh\": 0,\n            \"Position\": \"Seated\",\n            \"GoalId\": \"6c9af002-d0e2-477c-91ec-50d71fffba50\",\n            \"BeatId\": \"0cc08123-f231-47f1-8023-f8d78457e302\",\n            \"Beat\": {\n              \"Name\": \"On The Beat\",\n              \"Ratio\": 1,\n              \"Id\": \"0cc08123-f231-47f1-8023-f8d78457e302\"\n            },\n            \"Id\": \"60b669c3-7373-4fa0-aaa3-725eb6ab7ba7\"\n          }],\n          \"Id\": \"6c9af002-d0e2-477c-91ec-50d71fffba50\"\n        },\n        \"PlaylistGoalNotes\": [],\n        \"PlaylistGoalTracks\": [{\n          \"TrackId\": \"cfa5c59e-c607-430c-9eb6-75aff3531255\",\n          \"Track\": {\n            \"Name\": \"Must Have Done Something Right\",\n            \"Album\": \"Five Score and Seven Years Ago\",\n            \"Artist\": \"Relient K\",\n            \"Bpm\": 98,\n            \"DurationSeconds\": 199,\n            \"CoverImgUrl\": \"http://www.simfy.co.za/photos/tracks/35785292/320.jpg\",\n            \"MusicProviderTrackId\": \"35785292\",\n            \"MusicProviderId\": \"6fde5180-3a6f-4230-aea7-c607c726616f\",\n            \"MusicProvider\": null,\n            \"GenreId\": \"f2092b8f-2ffe-49ce-bb27-97b677eb2c67\",\n            \"Genre\": {\n              \"Name\": \"Other\",\n              \"Id\": \"f2092b8f-2ffe-49ce-bb27-97b677eb2c67\"\n            },\n            \"Id\": \"cfa5c59e-c607-430c-9eb6-75aff3531255\"\n          },\n          \"SortOrder\": 0,\n          \"Id\": \"eeb22476-9183-4c82-8ddf-4a846467c699\"\n        }],\n        \"Id\": \"78557a4a-d28b-4db9-908c-3eb9ba1b6303\"\n      }, {\n        \"SortOrder\": 11,\n        \"PlaylistId\": \"0e16d4ba-1557-46d0-891c-05ac87ecf90a\",\n        \"GoalId\": \"ab3c2ee0-dd6c-4c47-b154-9f0d9fd0f93f\",\n        \"Goal\": {\n          \"Name\": \"Cool Down\",\n          \"BpmHigh\": 90,\n          \"BpmLow\": 60,\n          \"Aim\": null,\n          \"Interval\": false,\n          \"CountryId\": \"87d2a384-a84b-471c-855d-a5f457210c34\",\n          \"Country\": null,\n          \"GoalChallenge\": null,\n          \"GoalChallengeId\": null,\n          \"GoalOptions\": [{\n            \"Name\": \"On the beat\",\n            \"Effort\": 50,\n            \"EffortHigh\": 0,\n            \"Position\": \"Seated\",\n            \"GoalId\": \"ab3c2ee0-dd6c-4c47-b154-9f0d9fd0f93f\",\n            \"BeatId\": \"0cc08123-f231-47f1-8023-f8d78457e302\",\n            \"Beat\": {\n              \"Name\": \"On The Beat\",\n              \"Ratio\": 1,\n              \"Id\": \"0cc08123-f231-47f1-8023-f8d78457e302\"\n            },\n            \"Id\": \"ab8a791f-b50f-4e7f-98b1-a1b135bcbff8\"\n          }],\n          \"Id\": \"ab3c2ee0-dd6c-4c47-b154-9f0d9fd0f93f\"\n        },\n        \"PlaylistGoalNotes\": [],\n        \"PlaylistGoalTracks\": [{\n          \"TrackId\": \"6fcbca3e-130a-4911-bf73-bce7f424db62\",\n          \"Track\": {\n            \"Name\": \"Get Down With Me\",\n            \"Album\": \"Tribute to the Spice Girls: Girl Power!\",\n            \"Artist\": \"Déjà Vu\",\n            \"Bpm\": 143,\n            \"DurationSeconds\": 227,\n            \"CoverImgUrl\": \"http://www.simfy.co.za/photos/tracks/16367533/320.jpg\",\n            \"MusicProviderTrackId\": \"16367533\",\n            \"MusicProviderId\": \"6fde5180-3a6f-4230-aea7-c607c726616f\",\n            \"MusicProvider\": null,\n            \"GenreId\": \"f2092b8f-2ffe-49ce-bb27-97b677eb2c67\",\n            \"Genre\": {\n              \"Name\": \"Other\",\n              \"Id\": \"f2092b8f-2ffe-49ce-bb27-97b677eb2c67\"\n            },\n            \"Id\": \"6fcbca3e-130a-4911-bf73-bce7f424db62\"\n          },\n          \"SortOrder\": 0,\n          \"Id\": \"7bcb0057-89ed-41c0-a866-f04d6b435043\"\n        }],\n        \"Id\": \"dae6c184-0438-4b20-b0b4-64c30621cead\"\n      }],\n      \"BackgroundTracks\": [{\n        \"SortOrder\": 1,\n        \"PlaylistPosition\": \"Before\",\n        \"TrackId\": \"0953ad56-64c9-4a88-85be-0dcadbd1e39c\",\n        \"Track\": {\n          \"Name\": \"Dog days are over\",\n          \"Album\": \"\",\n          \"Artist\": \"Florence + The Machine\",\n          \"Bpm\": 150,\n          \"DurationSeconds\": 245,\n          \"CoverImgUrl\": \"http://media.giphy.com/media/PgxjDJUaUqy6k/giphy-facebook_s.jpg\",\n          \"MusicProviderTrackId\": \"12321195\",\n          \"MusicProviderId\": \"6fde5180-3a6f-4230-aea7-c607c726616f\",\n          \"MusicProvider\": null,\n          \"GenreId\": \"7c87cd38-cdad-4bb7-9380-2b9121f7eef3\",\n          \"Genre\": {\n            \"Name\": \"Alternative\",\n            \"Id\": \"7c87cd38-cdad-4bb7-9380-2b9121f7eef3\"\n          },\n          \"Id\": \"0953ad56-64c9-4a88-85be-0dcadbd1e39c\"\n        },\n        \"Id\": \"49b51cd0-ba07-400a-81e3-5afb3d3cd246\"\n      }, {\n        \"SortOrder\": 1,\n        \"PlaylistPosition\": \"After\",\n        \"TrackId\": \"12aec035-cec2-48a4-ba83-af992ee00174\",\n        \"Track\": {\n          \"Name\": \"Too bad, so sad\",\n          \"Album\": \"Salute\",\n          \"Artist\": \"Matric\",\n          \"Bpm\": 80,\n          \"DurationSeconds\": 245,\n          \"CoverImgUrl\": \"http://media.giphy.com/media/PgxjDJUaUqy6k/giphy-facebook_s.jpg\",\n          \"MusicProviderTrackId\": \"573787\",\n          \"MusicProviderId\": \"6fde5180-3a6f-4230-aea7-c607c726616f\",\n          \"MusicProvider\": null,\n          \"GenreId\": \"31db3a05-30c7-4058-94a6-504046d4b178\",\n          \"Genre\": {\n            \"Name\": \"Pop\",\n            \"Id\": \"31db3a05-30c7-4058-94a6-504046d4b178\"\n          },\n          \"Id\": \"12aec035-cec2-48a4-ba83-af992ee00174\"\n        },\n        \"Id\": \"8cfb4b93-b91a-4bb0-89d6-d1774055e140\"\n      }, {\n        \"SortOrder\": 2,\n        \"PlaylistPosition\": \"After\",\n        \"TrackId\": \"3a0a7f77-d473-43cd-8bcb-bb1ae61e2769\",\n        \"Track\": {\n          \"Name\": \"Pump it up\",\n          \"Album\": \"\",\n          \"Artist\": \"Toya Delazy\",\n          \"Bpm\": 100,\n          \"DurationSeconds\": 245,\n          \"CoverImgUrl\": \"http://media.giphy.com/media/PgxjDJUaUqy6k/giphy-facebook_s.jpg\",\n          \"MusicProviderTrackId\": \"32093259\",\n          \"MusicProviderId\": \"6fde5180-3a6f-4230-aea7-c607c726616f\",\n          \"MusicProvider\": null,\n          \"GenreId\": \"7c87cd38-cdad-4bb7-9380-2b9121f7eef3\",\n          \"Genre\": {\n            \"Name\": \"Alternative\",\n            \"Id\": \"7c87cd38-cdad-4bb7-9380-2b9121f7eef3\"\n          },\n          \"Id\": \"3a0a7f77-d473-43cd-8bcb-bb1ae61e2769\"\n        },\n        \"Id\": \"16ec1aa1-081e-443a-8cfa-2a62cd128029\"\n      }, {\n        \"SortOrder\": 2,\n        \"PlaylistPosition\": \"Before\",\n        \"TrackId\": \"dddc39da-8bea-4c5f-8f12-31c1316a6443\",\n        \"Track\": {\n          \"Name\": \"Burn\",\n          \"Album\": \"Burn\",\n          \"Artist\": \"Ellie Golding\",\n          \"Bpm\": 174,\n          \"DurationSeconds\": 245,\n          \"CoverImgUrl\": \"http://media.giphy.com/media/PgxjDJUaUqy6k/giphy-facebook_s.jpg\",\n          \"MusicProviderTrackId\": \"46545191\",\n          \"MusicProviderId\": \"6fde5180-3a6f-4230-aea7-c607c726616f\",\n          \"MusicProvider\": null,\n          \"GenreId\": \"7c87cd38-cdad-4bb7-9380-2b9121f7eef3\",\n          \"Genre\": {\n            \"Name\": \"Alternative\",\n            \"Id\": \"7c87cd38-cdad-4bb7-9380-2b9121f7eef3\"\n          },\n          \"Id\": \"dddc39da-8bea-4c5f-8f12-31c1316a6443\"\n        },\n        \"Id\": \"17d2ab27-d953-49ca-bce2-ec44021ae27d\"\n      }],\n      \"CoverImages\": [\n        \"http://www.simfy.co.za/photos/tracks/51340018/320.jpg\",\n        \"http://www.simfy.co.za/photos/tracks/28093011/320.jpg\",\n        \"http://www.simfy.co.za/photos/tracks/12761579/320.jpg\",\n        \"http://www.simfy.co.za/photos/tracks/14585397/320.jpg\",\n        \"http://www.simfy.co.za/photos/tracks/288351/320.jpg\",\n        \"http://www.simfy.co.za/photos/tracks/572075/320.jpg\",\n        \"http://www.simfy.co.za/photos/tracks/48342403/320.jpg\",\n        \"http://www.simfy.co.za/photos/tracks/23069128/320.jpg\",\n        \"http://www.simfy.co.za/photos/tracks/43933655/320.jpg\",\n        \"http://www.simfy.co.za/photos/tracks/35785292/320.jpg\",\n        \"http://www.simfy.co.za/photos/tracks/16367533/320.jpg\"\n      ],\n      \"TrackCount\": 11,\n      \"TotalDurationSeconds\": 2442,\n      \"Id\": \"0e16d4ba-1557-46d0-891c-05ac87ecf90a\"\n    };\n  }));\n\n  /*\n\n  Create\n  ------\n\n  createNewPlaylistFromTemplate(template_id)\n\n\n  Edit\n  ----\n\n  Load up new playlist json structure\n\n\n  Can create a new playlist from a template, which has specific goals\n  Can add a track and track counter is correct\n  Can remove a track\n  Can add another track and track counter is correct\n  Can click out, come back, and all is sane\n\n  Checking submit button text and visibility\n  * on playlist creation, on playlist edit:\n    * no tracks added\n    * some tracks added\n    * all tracks added\n      * time too short\n      * time just right\n      * time too long\n\n  */\n\n  describe('[Add a playlist] Goals', function () {\n\n    beforeEach(function () {\n      this.createAnewPlaylist();\n    });\n\n    it('There should be some goals', function () {\n      var i = 0;\n      playlistController.playlist.PlaylistGoals.forEach(function () {\n        i++;\n      });\n      expect(i).toBeGreaterThan(1);\n    });\n\n    it('The first goal should be called Warm Up', function () {\n      // The playlist object should have goals sorted by sortorder anyway\n      expect(playlistController.playlist.PlaylistGoals[0].Goal.Name).toEqual('Warm Up');\n    });\n\n    it('The last goal should be called Cool Down', function () {\n      var i = playlistController.playlist.PlaylistGoals.length;\n      expect(playlistController.playlist.PlaylistGoals[i - 1].Goal.Name).toEqual('Cool Down');\n    });\n  });\n\n  describe('Editing a playlist', function () {\n\n    beforeEach(function () {\n      this.editPlaylist();\n    });\n\n    it('There should be some goals', function () {\n      var i = 0;\n      playlistController.playlist.PlaylistGoals.forEach(function () {\n        i++;\n      });\n      expect(i).toBeGreaterThan(1);\n    });\n\n    it('The first goal should be called Warm Up', function () {\n      // The playlist object should have goals sorted by sortorder anyway\n      expect(playlistController.playlist.PlaylistGoals[0].Goal.Name).toEqual('Warm Up');\n    });\n\n    it('The last goal should be called Cool Down', function () {\n      var i = playlistController.playlist.PlaylistGoals.length;\n      expect(playlistController.playlist.PlaylistGoals[i - 1].Goal.Name).toEqual('Cool Down');\n    });\n\n    it('There should be one track per goal in this playlist', function () {\n      expect(playlistController.checkAllGoalsHaveTracks()).toBe(true);\n    });\n\n  });\n\n  describe('[Add a playlist] Building a playlist with tracks', function () {\n\n    beforeEach(inject(function () {\n      this.createAnewPlaylist();\n    }));\n\n    it('A track can be added to the first goal', function () {\n      this.testTrackCanBeAddedToTheFirstGoal();\n    });\n\n    it('A track can be removed from a goal', function () {\n      this.testTrackCanBeRemovedFromAgoal();\n    });\n\n    it('Track counter is correct after adding a song', function () {\n      this.testTrackCounterCorrectAfterAddingSong();\n    });\n\n    it('Track counter is correct after adding two songs', function () {\n      this.testTrackCounterCorrectAfterAddingTwoSongs();\n    });\n\n    it('Track counter is correct after adding many songs', function () {\n      this.testTrackCounterCorrectAfterAddingManySongs();\n    });\n\n    it('Track counter is correct after adding and removing many songs', function () {\n      this.testTrackCounterCorrectAfterAddingAndRemovingSongs();\n    });\n\n  });\n\n  describe('[Add/editing a playlist] Testing workflow', function () {\n\n    it('A track can be added to the first goal', function () {\n      this.createAnewPlaylist();\n      this.editPlaylist();\n      this.testTrackCanBeAddedToTheFirstGoal();\n      this.createAnewPlaylist();\n      this.testTrackCanBeAddedToTheFirstGoal();\n      this.editPlaylist();\n      this.testTrackCanBeAddedToTheFirstGoal();\n      this.createAnewPlaylist();\n      this.testTrackCanBeAddedToTheFirstGoal();\n    });\n\n    it('A track can be removed from a goal', function () {\n      this.createAnewPlaylist();\n      this.editPlaylist();\n      this.testTrackCanBeRemovedFromAgoal();\n      this.createAnewPlaylist();\n      this.testTrackCanBeRemovedFromAgoal();\n      this.editPlaylist();\n      this.testTrackCanBeRemovedFromAgoal();\n      this.createAnewPlaylist();\n      this.testTrackCanBeRemovedFromAgoal();\n    });\n\n    it('Track counter is correct after adding a song', function () {\n      this.editPlaylist();\n      this.createAnewPlaylist();\n      this.editPlaylist();\n      this.createAnewPlaylist();\n      this.testTrackCounterCorrectAfterAddingSong();\n    });\n\n    it('Track counter is correct after adding two songs', function () {\n      this.editPlaylist();\n      this.createAnewPlaylist();\n      this.testTrackCounterCorrectAfterAddingTwoSongs();\n    });\n\n    it('Track counter is correct after adding many songs', function () {\n      this.createAnewPlaylist();\n      this.editPlaylist();\n      this.createAnewPlaylist();\n      this.testTrackCounterCorrectAfterAddingManySongs();\n    });\n\n    it('Track counter is correct after adding and removing many songs', function () {\n      this.createAnewPlaylist();\n      this.editPlaylist();\n      this.createAnewPlaylist();\n      this.testTrackCounterCorrectAfterAddingAndRemovingSongs();\n    });\n\n  });\n\n  describe('[New playlist] Checking submit button', function () {\n\n    beforeEach(inject(function () {\n      this.createAnewPlaylist();\n    }));\n\n    it('Playlist contains no tracks', function () {\n      expect(playlistController.checkAllGoalsHaveTracks()).toBe(false);\n      expect(playlistController.checkPlaylistLength()).toBe(false);\n      expect(playlistController.submitButtonText()).toEqual('SAVE_CONTINUE_LATER');\n\n      // Check if the submit button is disabled\n      expect(playlistController.disableSubmitButton()).toBe(true);\n      this.giveThePlaylistAname();\n      expect(playlistController.disableSubmitButton()).toBe(false);\n    });\n\n    it('Playlist contains some tracks', function () {\n      this.givePlaylistSomeTracks(this.trackNormal);\n      playlistController.playlistTracksLength = this.Playlists.getPlaylistLength();\n      expect(playlistController.checkAllGoalsHaveTracks()).toBe(false);\n      expect(playlistController.checkPlaylistLength()).toBe(false);\n      expect(playlistController.submitButtonText()).toEqual('SAVE_CONTINUE_LATER');\n\n      // Check if the submit button is disabled\n      expect(playlistController.disableSubmitButton()).toBe(true);\n      this.giveThePlaylistAname();\n      expect(playlistController.disableSubmitButton()).toBe(false);\n    });\n\n    it('Playlist has a track per goal: total time too short', function () {\n      this.fillPlaylistWithTracks(this.trackShort);\n      playlistController.playlistTracksLength = this.Playlists.getPlaylistLength();\n      expect(playlistController.checkAllGoalsHaveTracks()).toBe(true);\n      expect(playlistController.checkPlaylistLength()).toBe(false);\n      expect(playlistController.submitButtonText()).toEqual('SAVE_CONTINUE_LATER');\n\n      // Check if the submit button is disabled\n      expect(playlistController.disableSubmitButton()).toBe(true);\n      this.giveThePlaylistAname();\n      expect(playlistController.disableSubmitButton()).toBe(false);\n    });\n\n    it('Playlist has a track per goal: total time is good - no background music', function () {\n      this.fillPlaylistWithTracks(this.trackNormal);\n      playlistController.playlistTracksLength = this.Playlists.getPlaylistLength();\n      expect(playlistController.checkAllGoalsHaveTracks()).toBe(true);\n      expect(playlistController.checkPlaylistLength()).toBe(true);\n      expect(playlistController.checkHasPreRideBackgroundTracks()).toBe(false);\n      expect(playlistController.checkHasPostRideBackgroundTracks()).toBe(false);\n      expect(playlistController.submitButtonText()).toEqual('SAVE_CONTINUE_LATER');\n\n      // Check if the submit button is disabled\n      expect(playlistController.disableSubmitButton()).toBe(true);\n      this.giveThePlaylistAname();\n      expect(playlistController.disableSubmitButton()).toBe(false);\n    });\n\n    it('Playlist has a track per goal: total time is good - has pre-ride background music', function () {\n      this.fillPlaylistWithTracks(this.trackNormal);\n\n      // set currentgoal to a background music goal\n      this.Playlists.setCurrentGoal({\n        Goal: {\n          Name: 'Background music',\n          BpmLow: 0,\n          BpmHigh: 200\n        },\n        BackgroundSection: 'before'\n      });\n\n      this.Playlists.addBackgroundTrack('before', this.trackNormal);\n\n      playlistController.playlistTracksLength = this.Playlists.getPlaylistLength();\n      expect(playlistController.checkAllGoalsHaveTracks()).toBe(true);\n      expect(playlistController.checkPlaylistLength()).toBe(true);\n      expect(playlistController.checkHasPreRideBackgroundTracks()).toBe(true);\n      expect(playlistController.checkHasPostRideBackgroundTracks()).toBe(false);\n      expect(playlistController.submitButtonText()).toEqual('SAVE_CONTINUE_LATER');\n\n      // Check if the submit button is disabled\n      expect(playlistController.disableSubmitButton()).toBe(true);\n      this.giveThePlaylistAname();\n      expect(playlistController.disableSubmitButton()).toBe(false);\n    });\n\n    it('Playlist has a track per goal: total time is good - has post-ride background music', function () {\n      this.fillPlaylistWithTracks(this.trackNormal);\n\n      this.Playlists.addBackgroundTrack('after', this.trackNormal);\n\n      playlistController.playlistTracksLength = this.Playlists.getPlaylistLength();\n      expect(playlistController.checkAllGoalsHaveTracks()).toBe(true);\n      expect(playlistController.checkPlaylistLength()).toBe(true);\n      expect(playlistController.checkHasPreRideBackgroundTracks()).toBe(false);\n      expect(playlistController.checkHasPostRideBackgroundTracks()).toBe(true);\n      expect(playlistController.submitButtonText()).toEqual('SAVE_CONTINUE_LATER');\n\n      // Check if the submit button is disabled\n      expect(playlistController.disableSubmitButton()).toBe(true);\n      this.giveThePlaylistAname();\n      expect(playlistController.disableSubmitButton()).toBe(false);\n    });\n\n    it('Playlist has a track per goal: total time is good - has background music', function () {\n      this.fillPlaylistWithTracks(this.trackNormal);\n\n      this.Playlists.addBackgroundTrack('before', this.trackNormal);\n      this.Playlists.addBackgroundTrack('after', this.trackNormal);\n\n      playlistController.playlistTracksLength = this.Playlists.getPlaylistLength();\n      expect(playlistController.checkAllGoalsHaveTracks()).toBe(true);\n      expect(playlistController.checkPlaylistLength()).toBe(true);\n      expect(playlistController.checkHasPreRideBackgroundTracks()).toBe(true);\n      expect(playlistController.checkHasPostRideBackgroundTracks()).toBe(true);\n      expect(playlistController.submitButtonText()).toEqual('NEXT_PREVIEW');\n\n      // Check if the submit button is disabled\n      expect(playlistController.disableSubmitButton()).toBe(true);\n      this.giveThePlaylistAname();\n      expect(playlistController.disableSubmitButton()).toBe(false);\n    });\n\n    it('Playlist has a track per goal: total time too long', function () {\n      this.fillPlaylistWithTracks(this.trackLong);\n\n      playlistController.playlistTracksLength = this.Playlists.getPlaylistLength();\n      expect(playlistController.checkAllGoalsHaveTracks()).toBe(true);\n      expect(playlistController.checkPlaylistLength()).toBe(false);\n      expect(playlistController.submitButtonText()).toEqual('SAVE_CONTINUE_LATER');\n\n      // Check if the submit button is disabled\n      expect(playlistController.disableSubmitButton()).toBe(true);\n      this.giveThePlaylistAname();\n      expect(playlistController.disableSubmitButton()).toBe(false);\n    });\n\n  });\n\n  describe('[Edited playlist] Checking submit button', function () {\n\n    beforeEach(inject(function () {\n      this.editPlaylist();\n    }));\n\n    it('Playlist contains no tracks', function () {\n      this.removeAllTracks(this.trackNormal);\n      expect(playlistController.checkAllGoalsHaveTracks()).toBe(false);\n      expect(playlistController.checkPlaylistLength()).toBe(false);\n      expect(playlistController.submitButtonText()).toEqual('SAVE_CONTINUE_LATER');\n\n      // Check if the submit button is disabled\n      expect(playlistController.disableSubmitButton()).toBe(true);\n      this.setPlaylistComplete(false);\n      expect(playlistController.submitButtonText()).toEqual('SAVE_CONTINUE_LATER');\n      expect(playlistController.disableSubmitButton()).toBe(false);\n      this.removeThePlaylistname();\n      expect(playlistController.disableSubmitButton()).toBe(true);\n    });\n\n    it('Playlist contains some tracks', function () {\n      this.removeAllTracks(this.trackNormal);\n      this.givePlaylistSomeTracks(this.trackNormal);\n\n      expect(playlistController.checkAllGoalsHaveTracks()).toBe(false);\n      expect(playlistController.checkPlaylistLength()).toBe(false);\n      expect(playlistController.submitButtonText()).toEqual('SAVE_CONTINUE_LATER');\n\n      // Check if the submit button is disabled\n      expect(playlistController.disableSubmitButton()).toBe(true);\n      this.setPlaylistComplete(false);\n      expect(playlistController.submitButtonText()).toEqual('SAVE_CONTINUE_LATER');\n      expect(playlistController.disableSubmitButton()).toBe(false);\n      this.removeThePlaylistname();\n      expect(playlistController.disableSubmitButton()).toBe(true);\n    });\n\n    it('Playlist has a track per goal: total time too short', function () {\n      this.removeAllTracks(this.trackNormal);\n      this.fillPlaylistWithTracks(this.trackShort);\n\n      playlistController.playlistTracksLength = this.Playlists.getPlaylistLength();\n      expect(playlistController.checkAllGoalsHaveTracks()).toBe(true);\n      expect(playlistController.checkPlaylistLength()).toBe(false);\n      expect(playlistController.submitButtonText()).toEqual('SAVE_CONTINUE_LATER');\n\n      // Check if the submit button is disabled\n      expect(playlistController.disableSubmitButton()).toBe(true);\n      this.setPlaylistComplete(false);\n      expect(playlistController.submitButtonText()).toEqual('SAVE_CONTINUE_LATER');\n      expect(playlistController.disableSubmitButton()).toBe(false);\n      this.removeThePlaylistname();\n      expect(playlistController.disableSubmitButton()).toBe(true);\n    });\n\n    it('Previously complete Playlist has a track per goal: total time is good', function () {\n      this.removeAllTracks(this.trackNormal);\n      this.fillPlaylistWithTracks(this.trackNormal);\n\n      playlistController.playlistTracksLength = this.Playlists.getPlaylistLength();\n      expect(playlistController.checkAllGoalsHaveTracks()).toBe(true);\n      expect(playlistController.checkPlaylistLength()).toBe(true);\n      expect(playlistController.submitButtonText()).toEqual('UPDATE');\n\n      // Check if the submit button is disabled\n      expect(playlistController.disableSubmitButton()).toBe(false);\n      this.setPlaylistComplete(false);\n      expect(playlistController.disableSubmitButton()).toBe(false);\n      this.removeThePlaylistname();\n      expect(playlistController.disableSubmitButton()).toBe(true);\n    });\n\n    it('Playlist has a track per goal: total time too long', function () {\n      this.removeAllTracks(this.trackNormal);\n      this.fillPlaylistWithTracks(this.trackLong);\n\n      playlistController.playlistTracksLength = this.Playlists.getPlaylistLength();\n      expect(playlistController.checkAllGoalsHaveTracks()).toBe(true);\n      expect(playlistController.checkPlaylistLength()).toBe(false);\n      expect(playlistController.submitButtonText()).toEqual('SAVE_CONTINUE_LATER');\n\n      // Check if the submit button is disabled\n      expect(playlistController.disableSubmitButton()).toBe(true);\n      this.setPlaylistComplete(false);\n      expect(playlistController.submitButtonText()).toEqual('SAVE_CONTINUE_LATER');\n      expect(playlistController.disableSubmitButton()).toBe(false);\n      this.removeThePlaylistname();\n      expect(playlistController.disableSubmitButton()).toBe(true);\n    });\n\n  });\n\n  describe('[Editing incomplete playlist and making it complete] Checking submit button', function () {\n\n    beforeEach(inject(function () {\n      this.editPlaylist();\n      this.setPlaylistComplete(false);\n      this.setPlaylistIsSyncedToGyms(false);\n    }));\n\n    it('Previously incomplete Playlist has a track per goal: total time is good', function () {\n      this.removeAllTracks(this.trackNormal);\n      this.fillPlaylistWithTracks(this.trackNormal);\n\n      playlistController.playlistTracksLength = this.Playlists.getPlaylistLength();\n      expect(playlistController.checkAllGoalsHaveTracks()).toBe(true);\n      expect(playlistController.checkPlaylistLength()).toBe(true);\n      expect(playlistController.submitButtonText()).toEqual('NEXT_PREVIEW');\n\n      // Check if the submit button is disabled\n      expect(playlistController.disableSubmitButton()).toBe(false);\n      this.removeThePlaylistname();\n      expect(playlistController.disableSubmitButton()).toBe(true);\n    });\n\n  });\n\n  describe('New freestyle playlist', function () {\n\n    beforeEach(inject(function () {\n      this.createAnewFreestylePlaylist();\n    }));\n\n    it('Playlist contains no tracks', function () {\n      expect(playlistController.checkAllGoalsHaveTracks()).toBe(false);\n      expect(playlistController.checkPlaylistLength()).toBe(false);\n      expect(playlistController.submitButtonText()).toEqual('SAVE_CONTINUE_LATER');\n\n      // Check if the submit button is disabled\n      expect(playlistController.disableSubmitButton()).toBe(true);\n      this.giveThePlaylistAname();\n      expect(playlistController.disableSubmitButton()).toBe(false);\n    });\n\n  });\n\n});\n",
    "describe(\"directive: shows-message-when-hovered (vanilla jasmine, coffeescript)\", function() {\n\n  beforeEach(function() {\n    module(\"app\");\n  });\n\n  beforeEach(inject(function($rootScope, $compile) {\n    this.directiveMessage = 'ralph was here';\n    this.html = \"<div shows-message-when-hovered message='\" + this.directiveMessage + \"'></div>\";\n    this.scope = $rootScope.$new();\n    this.scope.message = this.originalMessage = 'things are looking grim';\n    this.elem = $compile(this.html)(this.scope);\n  }));\n\n  describe(\"when a user mouses over the element\", function() {\n    it(\"sets the message on the scope to the message attribute of the element\", function() {\n      this.elem.triggerHandler('mouseenter');\n      expect(this.scope.message).toBe(this.directiveMessage);\n    });\n  });\n\n  describe(\"when a users mouse leaves the element\", function() {\n    it(\"restores the message to the original\", function() {\n      this.elem.triggerHandler('mouseleave');\n      expect(this.scope.message).toBe(this.originalMessage);\n    });\n  });\n\n});\n",
    "(function() {\n  describe(\"directive: shows-message-when-hovered (jasmine-given, coffeescript)\", function() {\n    Given(function() {\n      return module(\"app\");\n    });\n    Given(inject(function($rootScope, $compile) {\n      this.directiveMessage = 'ralph was here';\n      this.html = \"<div shows-message-when-hovered message='\" + this.directiveMessage + \"'></div>\";\n      this.scope = $rootScope.$new();\n      this.scope.message = this.originalMessage = 'things are looking grim';\n      return this.elem = $compile(this.html)(this.scope);\n    }));\n    describe(\"when a user mouses over the element\", function() {\n      When(function() {\n        return this.elem.triggerHandler('mouseenter');\n      });\n      return Then(\"the message on the scope is set to the message attribute of the element\", function() {\n        return this.scope.message === this.directiveMessage;\n      });\n    });\n    return describe(\"when a users mouse leaves the element\", function() {\n      When(function() {\n        return this.elem.triggerHandler('mouseleave');\n      });\n      return Then(\"the message is reset to the original message\", function() {\n        return this.scope.message === this.originalMessage;\n      });\n    });\n  });\n\n}).call(this);\n"
  ]
}