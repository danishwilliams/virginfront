/**
 * Converts the language spreadsheet into JSON files. Each language results in a JSON file.
 *
 * The language spreadsheet is at:
 * https://docs.google.com/spreadsheets/d/19LywcTOWqdv-wdeU4TsvHwJub0tT3kZXWNpNw3KCn00/edit#gid=0
 *
 * Usage:
 * $ node language-export.js
 *
 * The resulting JSON files are then made available on the website.
 *
 * Installation:
 * $ npm install google-spreadsheet
 *
 * Setup:
 * To get a private key which allows access to your Google Drive, follow the instructions at:
 * https://developers.google.com/identity/protocols/OAuth2ServiceAccount#overview
 * New keytype is JSON - download the file and store it as google-generated-creds.json
 */

var GoogleSpreadsheet = require("google-spreadsheet");
var _ = require("underscore");
var fs = require('fs');

// spreadsheet key is the long id in the sheets URL
var my_sheet = new GoogleSpreadsheet('1IG3A6ARoTHKhxC82oi7qBw8rPccDfajOoEgRNU5vpZg');

// Without auth -- read only
// IMPORTANT: See note below on how to make a sheet public-readable!
// # is worksheet id - IDs start at 1
/*
my_sheet.getRows( 1, function(err, row_data){
  console.log( 'pulled in '+row_data.length + ' rows');
});
*/

// With auth -- read + write
// see below for authentication instructions
var creds = require('./google-generated-creds.json');
// OR, if you cannot save the file locally (like on heroku)
/*
var creds = {
  client_email: 'your-name@something.iam.gserviceaccount.com',
  private_key: "-----BEGIN PRIVATE KEY-----\n some long private key \n-----END PRIVATE KEY-----\n"
}
*/

my_sheet.useServiceAccountAuth(creds, function (err) {
  // getInfo returns info about the sheet and an array or "worksheet" objects
  my_sheet.getInfo(function (err, sheet_info) {
    //console.log( sheet_info.title + ' is loaded' );
    // use worksheet object if you want to stop using the # in your calls

    var sheet1 = sheet_info.worksheets[0];
    var language = [];
    var rowNumber = 0;

    sheet1.getRows(1, function (err, row_data) {
      //console.log( 'pulled in '+row_data.length + ' rows');
      row_data.forEach(function (val) {
        //console.log(val.firstname + ' ' + val.lastname + ' ' + val.emailaddress + ' ' + val.club);
        delete val._xml; delete val.id; delete val._links; delete val.save; delete val.del;
        //console.log(val);

        /* Set up an array for each language */
        if (rowNumber === 0) {
          //console.log('setting up language array!');
          var i = 0;
          _.keys(val).forEach(function(key) {
            if (key !== 'word') {
              language.push({language: key, id: i, words: [{}]});
              i++;
            }
          });
          //console.log(language);
        }


        // Get the language code
        if (val.word === '// Language code') {
          i = 0;
          language.forEach(function (value) {
             var code = _.pick(val, value.language);
             value.code = _.values(code)[0];
          });
          //console.log(language);
        }

        // This is a translation, so pop it into the array
        if (rowNumber > 5 && val.word.indexOf('//') !== 0 && val.word !== '-') {
          var englishWord = ''; // The english translation
          language.forEach(function (value) {
             var result = _.pick(val, value.language);
             if (_.values(result)[0]) {
               value.words[0][val.word] = _.values(result)[0];
               if (!englishWord) {
                 englishWord = _.values(result)[0];
               }
             }
             else {
               value.words[0][val.word] = englishWord;
             }
             //value.words.push({[val.word]: _.values(result)[0]});
          });          
        }

        rowNumber++;
      });

      //console.log(language)
      //console.log(JSON.stringify(language));

      // Write files
      // File encoding is UTF-8 with BOM so that they play nicely with Windows
      language.forEach(function(value) {
        fs.writeFile("../static/l10n/" + value.code + ".js", '\ufeff' + JSON.stringify(value.words[0], null, 2), function(err) {
            if(err) {
                return console.log(err);
            }
            console.log("Saved " + value.language + " translation in app/static/l10n/" + value.code + ".json");
        });

      if (value.code === 'en') {
        var contents = "/* Autogenerated file from language-export.js to prevent the Flash Of Untranslated Content on first page visit */" +
        "angular.module('app').constant('defaultI18n', { en: " + JSON.stringify(value.words[0], null, 2) + " });";

        fs.writeFile("../js/app/defaultI18n.autogenerated.js", contents, function(err) {
            if(err) {
                return console.log(err);
            }
            console.log("Autogenerated defaultI18n.js (for preventing the Flash Of Untranslated Content)");
        });

      }
      });

    });
  });
})
